{
  "hash": "1873445dcc919a2b935563583d226049",
  "result": {
    "engine": "jupyter",
    "markdown": "# Funktionen: Grundlagen\nFunktionen sind Unterprogramme, die Programmanweisungen bündeln, damit Programmteile mehrfach verwendet werden können. Auf diese Weise kann ein Programm schneller geschrieben werden und ist auch leichter lesbar. Python bringt, wie Sie der [Dokumentation](https://docs.python.org/3/library/functions.html) entnehmen können, eine überschaubare Anzahl von grundlegenden Funktionen mit. In diesem Kapitel wird die allgemeine Verwendung der in Python enthaltenen Funktionen vermittelt.\n\nPython wird dynamisch weiterentwickelt: regelmäßig erscheinen neue Versionen mit neuen Eigenschaften. In diesem Kapitel wird deshalb mit einer Reihe von Tipps auch vermittelt, wie die Dokumentation von Python zu lesen ist. Dies erfolgt auch in Hinblick auf die Möglichkeit, Python umfangreich durch Module zu erweitern. So haben beispielsweise die Funktionen des Moduls Pandas nicht selten dutzende dokumentierte Parameter.\n\n::: {#tip-dokumentation .callout-tip collapse=\"false\"}\n## Dokumentation\nDer wichtigste Tipp zuerst: **Benutzen Sie die Dokumentation!** Auch wenn Sie eine Funktion kennen: Vergewissern Sie sich regelmäßig, dass Sie noch auf dem neuesten Stand sind. Auf diese Weise erhalten Sie einen vollständigen Überblick über standardmäßig gesetzte und optional verfügbare Parameter. Außerdem erkennen Sie Änderungen in der Programmausführung und vermeiden so unerwartete Fehler.\n\n:::: {layout=\"[1, 1]\"}\n\n![Neuerung in Python](00-bilder/added-in-pyhton.png){fig-alt=\"Hinweis auf eine Neuerung in Python\"}\n\n![Abkündigung in Python](00-bilder/deprecated-in-python.png){fig-alt=\"Hinweis auf eine Abkündigung in Python\"}\n\n::::\n\nAchten Sie auf die korrekte Version der Dokumentation.\n\n![Versionsauswahl der Dokumentation](00-bilder/python-documentation-version.png){fig-alt=\"Auswahlmenü der Dokumentationsversion\" width=\"80%\"}\n\n:::\n\n## Funktionen und Methoden\nIn Python gibt es zwei Arten von Funktionen: Funktionen und Methoden.\n\n### Funktionen\nFunktionen können Objekte unabhängig von ihrem Datentyp übergeben werden.\nFunktionen werden über ihren Funktionsnamen gefolgt von runden Klammern `()` aufgerufen. Ein Beispiel ist die Funktion `print()`:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nvar_str = 'ABC'\nvar_int = 26\nvar_bool = True\n\nprint(\"Die Variable var_1 hat den Typ\", type(var_str))\nprint(\"Die Variable var_2 hat den Typ\", type(var_int))\nprint(\"Die Variable var_3 hat den Typ\", type(var_bool))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDie Variable var_1 hat den Typ <class 'str'>\nDie Variable var_2 hat den Typ <class 'int'>\nDie Variable var_3 hat den Typ <class 'bool'>\n```\n:::\n:::\n\n\nFunktionen müssen immer einen Wert zurückgeben. Wenn Funktionen keinen Wert zurückgeben können oder sollen, wird der Wert `None` zurückgegeben, der nicht existente Werte kennzeichnet.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nres = print( 15 )\nprint(res)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n15\nNone\n```\n:::\n:::\n\n\nFunktionen können verschachtelt und so von innen nach außen nacheinander ausgeführt werden. In diesem Code-Beispiel wird zunächst die Summe zweier Zahlen und anschließend der Wahrheitswert des Ergebnisses gebildet. Dieser wird anschließend mit der Funktion print ausgegeben.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nprint(bool(sum([1, 2])))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\n```\n:::\n:::\n\n\n### Methoden\nMethoden sind eine Besonderheit objektorientierter Programmiersprachen. Im vorherigen Kapitel wurde erläutert, dass in Python Objekte zu einem bestimmten Typ bzw. zu einer Klasse gehören und abhängig von den in ihnen gespeicherten Werte einen passenden Datentyp erhalten. Methoden sind Funktionen, die zu einer bestimmten Klasse gehören und nur für Objekte dieser Klasse verfügbar sind. Methoden können auch für mehrere Klassen definiert sein. Methoden werden getrennt durch einen Punkt `.` hinter Objekten mit ihrem Namen aufgerufen: `variable.methode` bzw. `(wert).methode`. Beispielsweise sind `.upper()`, `.lower()` und `.title` für Zeichenfolgen definierte Methoden.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ntoller_text = \"Python 3.12 ist großartig.\"\n\nprint(toller_text.upper())\nprint(toller_text.lower())\nprint(toller_text.title(), \"\\n\")\n\nprint((\"Mit in Klammern gesetzten Werten klappt es auch.\").upper())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPYTHON 3.12 IST GROSSARTIG.\npython 3.12 ist großartig.\nPython 3.12 Ist Großartig. \n\nMIT IN KLAMMERN GESETZTEN WERTEN KLAPPT ES AUCH.\n```\n:::\n:::\n\n\nFür Objekte mit einem unpassenden Datentyp sind Methoden wie `.lower()` nicht verfügbar.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nprint((1).upper())\n```\n:::\n\n\n::: {.cell execution_count=6}\n\n::: {.cell-output .cell-output-stdout}\n```\n'int' object has no attribute 'upper'\n```\n:::\n:::\n\n\nMethoden können verkettet und so nacheinander ausgeführt werden. In diesem Beispiel wird die Zeichenfolge 'Katze' klein geschrieben, dann die Häufigkeit des Buchstabens 'k' gezählt.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nprint('Katze'.lower().count('k'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n```\n:::\n:::\n\n\nWelche Methoden für ein Objekt verfügbar sind, kann mit der Funktion `dir(objekt)` bestimmt werden. Die Ausgabe der Funktion ist aber häufig sehr umfangreich. Um die relevanten Einträge auszuwählen, muss die Ausgabe gefiltert werden. Notwendig ist das aber nicht - Interessierte schauen in @nte-methods.\n\n::: {#nte-methods .callout-note collapse=\"true\"}\n## Methoden eines Objekts bestimmen\n\nMit der Funktion `dir(objekt)` können die verfügbaren Methoden eines Objekts ausgegeben werden. Dabei werden jedoch auch die Attribute und die Methoden der Klasse des Objekts ausgegeben, sodass die Ausgabe oft sehr umfangreich ist. Zum Beispiel für die Ganzzahl 1:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nprint(dir(1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'as_integer_ratio', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes']\n```\n:::\n:::\n\n\nUm die Ausgabe auf Methoden einzugrenzen, kann folgende Funktion in Listenschreibweise verwendet werden:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nobjekt = 1\n\nattribute = [attr for attr in dir(objekt) if callable (getattr(objekt, attr))]\nprint(attribute)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'as_integer_ratio', 'bit_length', 'conjugate', 'from_bytes', 'to_bytes']\n```\n:::\n:::\n\n\nMit doppelten Unterstrichen umschlossene Methoden sind für die Klasse definierte Methoden. Folgende Funktion entfernt Methoden mit doppelten Unterstrichen aus der Ausgabe:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nobjekt = 1\n\nattribute = [attr for attr in dir(objekt) if (callable(getattr(objekt, attr)) and not attr.startswith('__'))]\nprint(attribute)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['as_integer_ratio', 'bit_length', 'conjugate', 'from_bytes', 'to_bytes']\n```\n:::\n:::\n\n\nIm Fall einer Ganzzahl können Methoden (zur Abgrenzung von Gleitkommazahlen in umschließenden Klammern) wie folgt aufgerufen werden:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n(1).as_integer_ratio()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n(1, 1)\n```\n:::\n:::\n\n\nDie Methoden des Objekts 'toller_text':\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nobjekt = toller_text\n\nattribute = [attr for attr in dir(objekt) if (callable(getattr(objekt, attr)) and not attr.startswith('__'))]\nprint(attribute)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'removeprefix', 'removesuffix', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']\n```\n:::\n:::\n\n\n:::\n\n## Parameter\nVielen Funktionen und Methoden können getrennt durch Kommata mehrere Parameter übergeben werden. Die Werte, die als Parameter übergeben werden, werden Argumente genannt ([Python-Dokumentation](https://docs.python.org/3/faq/programming.html#faq-argument-vs-parameter)). [Parameter](https://docs.python.org/3/glossary.html#term-parameter) steuern die Programmausführung. Die für die Funktion `print()` verfügbaren Parameter stehen in der [Dokumentation der Funktion](https://docs.python.org/3/library/functions.html#print):\n\n```\nprint(*objects, sep=' ', end='\\n', file=None, flush=False)\n```\n\n`*objects`, `sep`, `end`, `file` und `flush` sind die Parameter der Funktion `print()`. \n\n  - Parameter ohne Gleichheitszeichen `=` müssen beim Funktions- bzw. Methodenaufruf übergeben werden. Parameter mit Gleichheitszeichen `=` können beim Aufruf übergeben werden, es handelt sich um optionale Parameter.\n\n  - Die Werte hinter dem Gleichheitszeichen zeigen die Standardwerte (default value) der Parameter an. Diese werden verwendet, wenn ein Argument nicht explizit beim Aufruf übergeben wird.\n\n::: {#tip-standardwerte .callout-tip collapse=\"true\"}\n## Ausnahmen bei Standardwerten\nBei den in der Funktionsdefinition genannten Werten handelt es sich nicht immer um die tatsächlichen Standardwerte. Es empfiehlt sich deshalb, wenn eine Funktion verwendet wird, die Beschreibung der Parameter zu lesen.\n\nEinige Funktionen verwenden das Schlüsselwort `None` zur Kennzeichnung des Standardwerts. Der Wert `None` dient dabei als Platzhalter.\nEin Beispiel ist die NumPy-Funktion [numpy.loadtxt()](https://numpy.org/doc/stable/reference/generated/numpy.loadtxt.html). \n\n```\nnumpy.loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, /\n              skiprows=0, usecols=None, unpack=False, ndmin=0, encoding=None, max_rows=None, /\n              *, quotechar=None, like=None)\n```\n\n  - Für den Parameter `delimiter` ist als Standardwert das Schlüsselwort `None` eingetragen. Wie der Funktionsbeschreibung zu entnehmen ist, ist der Standartwert tatsächlich das Leerzeichen: \"The default is whitespace.\"\n\n  - Auch der Parameter `usecols` hat den Standarwert `None`: \"The default, None, results in all columns being read.\"\n\nEin weiteres Beispiel ist die Funktion [pandas.read_csv()](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html#pandas.read_csv). Einige Argumente haben den Standardwert `<no_default>`. (Im Folgenden werden nur ausgewählte Parameter gezeigt).\n\n```\npandas.read_csv(sep=<no_default>, verbose=<no_default>)\n```\n\nAus der Beschreibung können die tatsächlichen Standardwerte abgelesen werden:  \nsep : str, default ‘,’  \nverbose : bool, default False  \n\n:::\n\n  - Argumente können in Python entweder als positionales Argument übergeben werden Das heißt, Python erwartet Argumente in einer feststehenden Reihenfolge entsprechend der Parameter der Funktionsdefinition. Alternativ können Argumente als Schlüsselwort übergeben werden, die Zuordnung von Eingaben erfolgt über den Namen des Parameters. Standardmäßig können Argumente positional oder per Schlüsselwort übergeben werden. Abweichungen davon werden durch die Symbole `*` und `/` gekennzeichnet (siehe folgenden Tipp).\n\n::: {#tip-sonderzeichen .callout-tip collapse=\"true\"}\n## Positionale und Schlüsselwortargumente, *args und **kwargs\nDie Symbole `*` und `/` zeigen an, welche Parameter positional und welche per Schlüsselwort übergeben werden können bzw. müssen.\n\n:::: {.border}\n\n| Linke Seite | Trennzeichen | Rechte Seite |\n|:---:|:---:|:---:|\n| nur positionale Argumente | / | positionale oder Schlüsselwortargumente |\n| positionale oder Schlüsselwortargumente | * | nur Schlüsselwortargumente |\n\n(<https://realpython.com/python-asterisk-and-slash-special-parameters/>)\n::::\n\n&nbsp;\n\nEin Beispiel für das Trennzeichen `*` ist die Funktion `glob` aus dem gleichnamigen Modul. Der Parameter `pathname` kann positional (an erster Stelle) oder als Schlüsselwort übergeben werden. Die übrigen Parameter müssen als Schlüsselwortargumente übergeben werden.\n\n```\nglob.glob(pathname, *, root_dir=None, dir_fd=None, recursive=False, include_hidden=False)\n```\n\nBeide Steuerzeichen können innerhalb einer Funktionsdefinition vorkommen, allerdings nur in der Reihenfolge `/` und `*`. Im umgekehrten Fall wäre es unmöglich, Argumente zu übergeben. Ein Beispiel ist die Funktion `sorted`. Der erste Parameter muss positional übergeben werden, die Parameter `key` und `reverse` müssen als Schlüsselworte übergeben werden.\n\n```\nsorted(iterable, /, *, key=None, reverse=False)¶\n```\n\n:::: {.callout-warning appearance=\"simple\"}\n## Ausnahmen\nEinige Funktionen weichen von der Systematik ab, beispielsweise die Funktionen `min()` und `max()`. Diese sind (u. a.) in der Form definiert:\n\n```\nmin(iterable, *, key=None)\nmax(iterable, *, key=None)\n```\n\nBeide Funktionen akzeptieren den Parameter `iterable` aber nicht als Schlüsselwort.\n::::\n\nVielen Funktionen können beliebig viele Argumente positional oder als Schlüsselwort übergeben werden. Im Allgemeinen wird dies durch die Schlüsselwörter `*args` (positionale Argumente) und `**kwargs` (key word arguments, Schlüsselwortargumente) angezeigt. Der Unterschied wird durch das eine bzw. die beiden Sternchen markiert, die Schlüsselwörter selbst sind austauschbar (wie bei der Funktion `print(*objects)`). Das Schlüsselwort `*args` entspricht zugleich dem Symbol `*` in der Funktionsdefinition, d. h. rechts davon dürfen nur Schlüsselwortargumente stehen. Weitere Informationen dazu finden Sie [hier](https://book.pythontips.com/en/latest/args_and_kwargs.html).\n:::\n\nIn der Funktionsdefinition von `print()` ist `*objects` also ein positionaler Parameter (dieser steht immer an erster Stelle), der keinen Standardwert hat und dem beliebig viele Argumente übergeben werden können (n Eingaben stehen an den ersten n-Stellen). Die weiteren Parameter der Funktion `print()` sind optional und müssen als Schlüsselwort übergeben werden.\n\n## Aufgaben Funktionen\n1. Richtig oder falsch: Methoden stehen abhängig vom Datentyp eines Werts oder eines Objekts zur Verfügung.\n\n2. Geben Sie die drei Werte 1, 2 und 3 mit `print()` aus. Parametrisieren Sie die Funktion so, dass ihre Ausgabe wie folgt aussieht:\n\n::: {.cell execution_count=13}\n\n::: {.cell-output .cell-output-stdout}\n```\n1_x_2_x_3\n```\n:::\n:::\n\n\n3. Schlagen Sie in der Dokumentation die Funktion [bool()](https://docs.python.org/3/library/functions.html#bool) nach.\n\n  - Welche Parameter nimmt die Funktion entgegen und welche davon sind optional?\n\n  - Welche Argumente werden positional und welche als Schlüsselübergeben? Ist die Art der Übergabe wählbar oder festgelegt?\n\n::: {.callout-tip collapse=\"true\"}\n## Lösungen\nAufgabe 1: richtig\n\nAufgabe 2\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nprint(1, 2, 3, sep = \"_x_\")\n```\n:::\n\n\nAufgabe 3: Die Funktion bool() hat ein optionales Argument object mit dem Standardwert False. Das Argument muss positional übergeben werden.\n:::\n\n",
    "supporting": [
      "funktionen_files/figure-pdf"
    ],
    "filters": []
  }
}