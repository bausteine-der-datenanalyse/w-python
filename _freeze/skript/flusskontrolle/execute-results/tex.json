{
  "hash": "0ed6010fde091c6c0beaa1e2c3000851",
  "result": {
    "engine": "jupyter",
    "markdown": "## Flusskontrolle\nDie Flusskontrolle ermöglicht es, die Ausführung von Programmteilen zu steuern. Anweisungen können übersprungen oder mehrfach ausgeführt werden.\n\n### Abzweigungen\nAbzweigungen ermöglichen eine Fallunterscheidung, bei der abhängig von einer oder mehreren Bedingungen verschiedene Teile des Skripts ausgeführt werden.\n\nIn Python werden Abzweigungen mit dem Schlüsselwort `if` eingeleitet. Dieses wird von der Abzweigbedingung gefolgt und mit einem Doppelpunkt `:` abgeschlossen. Falls die Abzweigbedingung wahr ist, wird der eingerückte Anweisungsblock ausgeführt.\n\n```\nif Bedingung:\n    Anweisungsblock\n```\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# Beispiel: Zahl kleiner als ein Schwellwert\n\na = 7\nif a < 10:\n    print( 'Die Zahl', a, 'ist kleiner als 10.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDie Zahl 7 ist kleiner als 10.\n```\n:::\n:::\n\n\nEs ist auch möglich einen alternativen Anweisungsblock zu definieren, welcher ausgeführt wird, wenn die Bedingung falsch ist. Dieser wird mit dem `else` Schlüsselwort umgesetzt.\n\n```\nif Bedingung:\n    # Bedingung ist wahr\n    Anweisungsblock\nelse:\n    # Bedingung ist falsch\n    Anweisungsblock\n```\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Beispiel: Zahl kleiner als ein Schwellwert mit alternativer Ausgabe\n\na = 13\nif a < 10:\n    print( 'Die Zahl', a, 'ist kleiner als 10.')\nelse:\n    print( 'Die Zahl', a, 'ist nicht kleiner als 10.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDie Zahl 13 ist nicht kleiner als 10.\n```\n:::\n:::\n\n\nEs können auch mehrere Bedingungen übergeben werden.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Beispiel: Zahl im Wertebereich zwischen 10 und 20\n\na = 1\nif a < 20 and a > 10:\n    print( 'Die Zahl', a, 'liegt zwischen 10 und 20.')\nelse:\n    print( 'Die Zahl', a, 'liegt nicht zwischen 10 und 20.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDie Zahl 1 liegt nicht zwischen 10 und 20.\n```\n:::\n:::\n\n\nSchließlich können mehrere alternative Bedingungen geprüft werden. Dies ist zum einen durch das Verschachteln von Abzweigungen möglich.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Beispiel: Zahl im Wertebereich zwischen 10 und 20 mit verschachtelten Abzweigungen\n\na = 12\nif a > 10:\n    print( 'Die Zahl', a, 'ist größer als 10.' )\n    \n    if a < 20:\n        print( 'Die Zahl', a, 'ist kleiner als 20.' )\n        print( 'Damit liegt die Zahl zwischen 10 und 20.')\n    else:\n        print( 'Die Zahl', a, 'ist größer als 20 und liegt nicht im gesuchten Wertebereich.' )\nelse:\n        print( 'Die Zahl', a, 'ist kleiner als 10 und liegt nicht im gesuchten Wertebereich.' )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDie Zahl 12 ist größer als 10.\nDie Zahl 12 ist kleiner als 20.\nDamit liegt die Zahl zwischen 10 und 20.\n```\n:::\n:::\n\n\nZum anderen ist dies mit dem Schlüsselwort `elif` möglich.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Beispiel: Zahl im Wertebereich zwischen 10 und 20 mit elif\n\na = 112\nif a < 20 and a > 10:\n  print('Die Zahl', a, 'liegt zwischen 10 und 20.')\nelif a < 10:\n  print('Die Zahl', a, 'ist kleiner als 10 und liegt nicht im gesuchten Wertebereich.' )\nelif a > 20 and a <= 100:\n  print('Die Zahl', a, 'ist größer als 20, aber nicht größer als 100.')\nelif a > 20 and a <= 1000:\n  print('Die Zahl', a, 'ist größer als 20, aber nicht größer als 1000.')\nelse:\n  print('Die Zahl', a, 'liegt nicht zwischen 10 und 20 und ist größer als 1000.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDie Zahl 112 ist größer als 20, aber nicht größer als 1000.\n```\n:::\n:::\n\n\n### Schleifen\nSchleifen ermöglichen es, Anweisungen zu wiederholen. In Python können `while`- und `for`-Schleifen definiert werden. Beide benötigen:\n\n  - einen **Schleifenkopf**, welcher die Ausführung des Anweisungsblocks steuert, und\n  \n  - einen **Anweisungsblock**, also eine Gruppe von Anweisungen, welche bei jedem Schleifendurchlauf ausgeführt werden.\n\nDie `while`-Schleife kommt mit nur einer Bedingung im Schleifenkopf aus und ist die allgemeinere von beiden. Jede `for`-Schleife kann zu einer `while`-Schleife umgeschrieben werden (indem ein Zähler in den Anweisungsblock integriert wird.) \nWelcher der beiden Typen verwendet wird, hängt von der jeweiligen Aufgabe ab.\n\n#### while-Schleifen\nEine `while`-Schleife führt den Anweisungsblock immer wieder aus, solange die Ausführbedingung wahr ist. Die Schleife wird mit dem Schlüsselwort `while` eingeleitet, gefolgt von der Ausführbedingung. Dieser Schleifenkopf wird mit einem Doppelpunkt `:` abgeschlossen. Darunter wird der eingerückte Anweisungsblock definiert.\n\n```\nwhile Bedingung:\n    Anweisungsblock\n```\n\nBeim Beginn der Schleife und nach jedem Durchlauf wird die Bedingung geprüft. Ist sie wahr, so wird der Anweisungsblock ausgeführt, wenn nicht, ist die Schleife beendet und die nächste Anweisung außerhalb der Schleife wird ausgeführt.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Beispiel: Erhöhen eines Variablenwertes\n\n# Setze Startwert\na = 5\n\n# Definiere Schleife, welche solange ausgeführt \n# wird, wie a kleiner als oder gleich 10 ist\nwhile a <= 10:\n    # Anweisungsblock der Schleife:\n    \n    # 1. Ausgabe des aktuellen Werts von a \n    print('aktueller Wert von a', a)\n    \n    # 2. Erhöhung von a um Eins\n    a += 1\n\n# Ausgabe des Wertes nach der Schleife\nprint('Wert von a nach der Schleife', a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\naktueller Wert von a 5\naktueller Wert von a 6\naktueller Wert von a 7\naktueller Wert von a 8\naktueller Wert von a 9\naktueller Wert von a 10\nWert von a nach der Schleife 11\n```\n:::\n:::\n\n\n::: {#wrn-endlosschleife .callout-warning appearance=\"simple\" collapse=\"false\"}\n## Endlosschleife\n\n`while`-Schleifen führen zu einer Endlosschleife, wenn die Abbruchbedingung nicht erreicht werden kann. Beispielsweise fehlt in der folgenden Schleife eine Möglichkeit für die Laufvariable x den Wert 5 zu erreichen.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nx = 1\n\nwhile x < 5:\n  print(x)\n```\n:::\n\n\nIn diesem Fall können Sie die Programmausführung durch Drücken von `Strg`+ `C` beenden.\n\n:::\n\n#### for-Schleifen\nWährend die `while`-Schleife ausgeführt wird, solange eine Bedingung erfüllt ist, wird die `for`-Schleife über eine Laufvariable gesteuert, die eine Sequenz durchläuft. Die Syntax sieht wie folgt aus:\n\n```\nfor Laufvariable in Sequenz:\n  Anweisungsblock\n```\n\nZur Definition des Schleifenkopf gehören die beiden Schlüsselworte `for` und `in` und der Kopf wird mit einem Doppelpunkt `:` abgeschlossen. Auch hier wird der Anweisungsblock eingerückt.\n\nDie Sequenz wird mit einem range-Objekt erstellt, das mit der Funktion `range(start = 0, stop, step = 1)` erzeugt wird. `range()` nimmt ganzzahlige Werte als *positionale Argumente* entgegen und erzeugt Ganzzahlen von `start` bis *nicht einschließlich* `stop` mit der Schrittweite `step`. Dabei ist wichtig, dass Python **exklusiv zählt**, das heißt, Python beginnt standarmäßig bei `0` zu zählen und der als Argument `stop` übergebene Wert wird nicht mitgezählt.\n\nDie Funktion `range()` gibt ein range-Objekt zurück, das mit `print()` nicht unmittelbar die erwartete Ausgabe erzeugt.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# range(start = 1, stop = 5) - step wird nicht übergeben, es gilt der Standardwert step = 1\nprint(range(1, 5), type(range(1, 5)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nrange(1, 5) <class 'range'>\n```\n:::\n:::\n\n\nDieses Verhalten wird faule Auswertung ([lazy evaluation](https://de.wikipedia.org/wiki/Lazy_Evaluation)) genannt: Die Werte des range-Objekts werden erst erzeugt, wenn Sie benötigt werden. Im Folgenden Code wird das range-Objekt mit einer Schleife durchlaufen und für jeden Durchlauf der Wert der Laufvariable `i` ausgegeben.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nfor i in range(1, 5):\n  print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n3\n4\n```\n:::\n:::\n\n\nMit dem Parameter `step` kann die Schrittweite gesteuert werden.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nfor i in range(1, 15, 3):\n  print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n4\n7\n10\n13\n```\n:::\n:::\n\n\nNützlich ist die Ausgabe des range-Objekts in eine Liste oder in ein Tupel, Sammeltypen, die im nächsten Kapitel behandelt werden.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# Ausgabe der geraden Zahlen 1-10 in eine Liste\nprint(\"Liste:\", list(range(2, 11, 2)))\n\n# Ausgabe der ungeraden Zahlen 1-10 in ein Tupel\nprint(\"Tupel:\", tuple(range(1, 11, 2)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nListe: [2, 4, 6, 8, 10]\nTupel: (1, 3, 5, 7, 9)\n```\n:::\n:::\n\n\n`start` und `stop` können auch negativ sein, `step` muss immer größer 0 sein.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nfor i in range(-5, -1):\n  print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-5\n-4\n-3\n-2\n```\n:::\n:::\n\n\n`stop` muss immer größer als `start` sein. Um eine absteigende Zahlenfolge zu erzeugen, wird die Funktion `reversed(sequenz)` verwendet.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# Die Ausgabe bleibt leer\nprint(list(range(5, 0)))\n\n# Mit der Funktion reversed geht es\nprint(list(reversed(range(0, 5))))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[]\n[4, 3, 2, 1, 0]\n```\n:::\n:::\n\n\n##### Listennotation\n\n::: {.border}\nDie sogenannte Listennotation ist eine Kurzschreibweise für for-Schleifen. In Listennotation geschriebene Schleifen müssen in einer Zeile stehen und haben die folgende Syntax:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nquadratzahlen = [wert ** 2 for wert in range(10, 0, -1)]\nprint(quadratzahlen)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[100, 81, 64, 49, 36, 25, 16, 9, 4, 1]\n```\n:::\n:::\n\n\n(@matthes2017python, S. 71)\n:::\n\n#### Die Schlüsselwörter break und continue\nManchmal kann es notwendig sein, den Anweisungsblock einer Schleife vorzeitig zu verlassen. Dafür können die Schlüsselwörter `break` und `continue` benutzt werden. Das Schlüsselwort `break` bewirkt, dass die Schleife sofort verlassen wird. Dagegen führt das Schlüsselwort `continue` dazu, dass der aktuelle Schleifendurchlauf beendet und der nächste Durchlauf begonnen wird.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nx = 0\nwhile x < 10:\n\n  x += 1\n\n  # keine geraden Zahlen ausgeben\n  if x % 2 == 0:\n    continue\n\n  # Schleife bei x == 7 beenden\n  if x == 7:\n    break\n\n  print(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n3\n5\n```\n:::\n:::\n\n\n### Ausnahmebehandlung\n\nDie Ausnahmebehandlung erlaubt es, Python alternative Anweisungen zu geben, die beim Auftreten eines Fehlers ausgeführt werden sollen. Dies ist beispielsweise beim Einlesen von Datensätzen nützlich, um sich die Ursache von Fehlermeldungen ausgeben zu lassen - eine Technik, die im [Methodenbaustein Einlesen strukturierter Datensätze](https://bausteine-der-datenanalyse.github.io/m-einlesen-strukturierter-datens-tze/einlesen-strukturierter-datens%C3%A4tze.html) vorgestellt wird. \n\nIn Python gibt es zwei Arten von Fehlern. Dies sind erstens Syntaxfehler, die Python mit einer Fehlermeldung ähnlich wie der folgenden quitiert. Syntaxfehler werden durch das Schreiben von syntaktisch korrektem Programmcode behoben.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nprint(1}\n```\n:::\n\n\n::: {.cell execution_count=17}\n\n::: {.cell-output .cell-output-stdout}\n```\nclosing parenthesis '}' does not match opening parenthesis\n```\n:::\n:::\n\n\nDie zweite Art von Fehlern sind Ausnahmen (exceptions), die auch bei syntaktisch korrektem Programmcode auftreten können. Ausnahmen führen auch zu Fehlermeldungen.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n# Beispiel 1: Division durch Null\nprint(1 / 0)\n```\n:::\n\n\n::: {.cell execution_count=19}\n\n::: {.cell-output .cell-output-stdout}\n```\ndivision by zero\n```\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n# Beispiel 2: undefinierte Variable\nprint(undefinierte_variable)\n```\n:::\n\n\n::: {.cell execution_count=21}\n\n::: {.cell-output .cell-output-stdout}\n```\nname 'undefinierte_variable' is not defined\n```\n:::\n:::\n\n\nFehlermeldungen wie diese können in Python mit der [Ausnahmebehandlung](https://docs.python.org/3/tutorial/errors.html) abgefangen werden. Diese wird mit dem Schlüsselwort `try` eingeleitet, das mit dem Doppeltpunkt `:` abgeschlossen wird. In der nächsten Zeile folgt eingrückt der Anweisungblock, der auf Ausnahmen getestet werden soll. *Hinweis: Der Anweisungsblock wird tatsächlich ausgeführt, Änderungen an Daten oder Dateien sind also möglich.* Anschließend wird mit dem Schlüsselwort `except`, das von einem Doppelpunkt `:` und in der nächsten Zeile von einem eingerückten Anweisungsblock gefolgt wird, festgelegt, was beim Aufkommen einer Ausnahme passieren soll. Optional kann mit dem Schlüsselwort `else` nach dem gleichen Schema ein weiterer Anweisungsblock definiert werden, der bei einer erfolgreichen Ausführung des Anweisungsblocks unter `try` *zusätzlich* ausgeführt wird. Der allgemeiner Aufbau lautet wie folgt:\n\n```\ntry:\n  Anweisungsblock_1 \nexcept:\n  Anweisungsblock falls Anweisungblock_1 eine Ausnahme erzeugt\nelse:\n  optionaler Anweisungsblock falls Anweisungsblock_1 keine Ausnahme erzeugt\n```\n\nMithilfe der Ausnahmebehandlungen können die Elemente angezeigt werden, die zu einer Fehlermeldung führen.\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\na = 1\nb = 2\n\ntry:\n  differenz = a - b\nexcept:\n  print(f\"Die Differenz aus {a} und {b} konnte nicht gebildet werden.\")\nelse:\n  print(f\"Die Differenz aus {a} und {b} ist {differenz}.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDie Differenz aus 1 und 2 ist -1.\n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\na = 1\nb = 'abc'\n\ntry:\n  differenz = a - b\nexcept:\n  print(f\"Die Differenz aus {a} und {b} konnte nicht gebildet werden.\")\nelse:\n  print(f\"Die Differenz aus {a} und {b} ist {differenz}.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDie Differenz aus 1 und abc konnte nicht gebildet werden.\n```\n:::\n:::\n\n\nAuch ist es möglich, die Fehlermeldung abzufangen und auszugeben. Dafür wird die Zeile `except:` wie folgt modifiziert `except Exception as error:`\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\na = 1\nb = 'abc'\n\ntry:\n  differenz = a - b\nexcept Exception as error:\n  print(f\"Die Differenz aus {a} und {b} konnte nicht gebildet werden.\")\n  print(error)\nelse:\n  print(f\"Die Differenz aus {a} und {b} ist {differenz}.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDie Differenz aus 1 und abc konnte nicht gebildet werden.\nunsupported operand type(s) for -: 'int' and 'str'\n```\n:::\n:::\n\n\n## Aufgaben Flusskontrolle\n1. Schreiben Sie ein Programm, dass von 1 bis 25 und von 38 bis 50 zählt und jeden Wert, der ganzzahlig durch 7 teilbar ist, mit `print()` ausgibt.\n\n2. Roulette: Schreiben Sie ein Programm, dass für eine Zahl prüft, ob diese im Wertebereich des Spieltischs liegt. Falls nein, soll eine Fehlermeldung ausgegeben werden. Falls ja, soll das Programm ausgeben, ob die Zahl\n\n  - gerade oder ungerade ist,\n\n  - rot oder schwarz ist,\n\n  - niedrig (1-18) oder hoch (19-36) ist und\n\n  - im 1., 2. oder 3. Dutzend liegt.\n\n:::: {.border}\n\n![Roulette Tableau](00-bilder/European_roulette_cc-by-sa.png){fig-alt=\"Roulettetisch: Roulette-Scheibe mit Zahlenfeld.\" width=\"90%\"}\n\nEuropean roulette von Betzaar.com ist lizensiert unter [CC 3.0 BY-SA](https://creativecommons.org/licenses/by-sa/3.0/deed.en) und verfügbar auf \n[wikimedia.org](https://commons.wikimedia.org/wiki/File:European_roulette.svg). 2010\n::::\n\n&nbsp;\n\n**Die Musterlösung kann Marc machen.**\n\n::: {.callout-tip collapse=\"true\"}\n## Musterlösung Aufgaben Flusskontrolle\n\n:::\n\n&nbsp;  \n(@Arnold-2023-schleifen-abzweigungen)\n\n",
    "supporting": [
      "flusskontrolle_files/figure-pdf"
    ],
    "filters": []
  }
}