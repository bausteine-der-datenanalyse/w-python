# Funktionen
Funktionen sind Unterprogramme, die Programmanweisungen bündeln, damit Programmteile mehrfach verwendet werden können. Auf diese Weise kann ein Programm schneller geschrieben werden und ist auch leichter lesbar. Python bringt, wie Sie der [Dokumentation](https://docs.python.org/3/library/functions.html) entnehmen können, eine überschaubare Anzahl von grundlegenden Funktionen mit. Durch das Laden von Modulen können weitere Funktionen hinzugefügt werden. Außerdem können eigene Funktionen definiert werden. In diesem Kapitel wird die allgemeine Verwendung von Funktionen in Python sowie das Erstellen eigener Funktionen vermittelt.

Eine vollständige Beschreibung der in Python verfügbaren Funktionen ist nicht nur wegen des Umfangs - einige Funktionen haben dutzende dokumentierte Argumente - unmöglich. Auch kann Python umfangreich durch Module erweitert werden und wird dynamisch weiterentwickelt: regelmäßig erscheinen neue Versionen mit neuen Eigenschaften. In diesem Kapitel wird deshalb mit einer Reihe von Tipps auch vermittelt, wie die Dokumentation von Python zu lesen ist.

::: {#tip-dokumentation .callout-tip collapse="false"}
## Dokumentation
Der wichtigste Tipp zuerst: **Benutzen Sie die Dokumentation!** Auch wenn Sie eine Funktion kennen: Vergewissern Sie sich regelmäßig, dass Sie noch auf dem neuesten Stand sind. Auf diese Weise erhalten Sie einen vollständigen Überblick über standardmäßig gesetzte und optional verfügbare Parameter. Außerdem erkennen Sie Änderungen in der Programmausführung und vermeiden so unerwartete Fehler.

:::: {layout="[1, 1]"}

![Neuerung in Python](skript/00-bilder/added-in-pyhton.png){fig-alt="Hinweis auf eine Neuerung in Python"}

![Abkündigung in Python](skript/00-bilder/deprecated-in-python.png){fig-alt="Hinweis auf eine Abkündigung in Python"}

::::
:::

## Funktionen und Methoden
In Python gibt es zwei Arten von Funktionen: Funktionen und Methoden. In diesem Kapitel werden hauptsächlich Funktionen behandelt. Im Kapitel **Querverweis** wird der Umgang mit Methoden vertieft.

### Funktionen
Funktionen werden über ihren Funktionsnamen gefolgt von runden Klammern `()` aufgerufen. Ein Beispiel ist die Funktion `print()`, der Objekte unabhängig von ihrem Datentyp übergeben werden können.

```{python}
var_str = 'ABC'
var_int = 26
var_bool = True

print("Die Variable var_1 hat den Typ", type(var_str))
print("Die Variable var_2 hat den Typ", type(var_int))
print("Die Variable var_3 hat den Typ", type(var_bool))
```

Funktionen müssen immer einen Wert zurückgeben. Wenn Funktionen keinen Wert zurückgeben können oder sollen, wird der Wert `None` zurückgegeben, der nicht existente Werte kennzeichnet.

```{python}
res = print( 15 )
print(res)
```

### Methoden
Methoden sind eine Besonderheit objektorientierter Programmiersprachen. Im vorherigen Kapitel wurde erläutert, dass in Python Variablen bzw. Objekte abhängig von den in ihnen gespeicherten Werte einen passenden Datentyp erhalten. Methoden sind Funktionen, die zu einem bestimmten Datentyp gehören. Methoden werden getrennt durch einen Punkt `.` hinter Objekten mit ihrem Namen aufgerufen: `Variable.Methode` bzw. `(Wert).Methode`. Die Methoden `.upper()`, `.lower()` und `.title` sind für Zeichenfolgen definierte Methoden.

```{python}
toller_text = "Python 3.12 ist großartig."

print(toller_text)
print(toller_text.upper())
print(toller_text.lower())
print(toller_text.title(), "\n")

print(("Mit in Klammern gesetzten Werten klappt es auch.").upper())
```

Auf Objekte mit einem unpassenden Datentyp können Methoden wie `.lower()` nicht angewendet werden.

```{python}
try:
  var_int.upper()
except AttributeError as error:
  print(error)
```

## Parameter
Vielen Funktionen und Methoden können getrennt durch Kommata mehrere Parameter übergeben werden. [Parameter](https://docs.python.org/3/glossary.html#term-parameter) steuern die Programmausführung. Die für die Funktion `print()` verfügbaren Parameter stehen in der [Dokumentation der Funktion](https://docs.python.org/3/library/functions.html#print). Die Werte, die als Parameter übergeben werden, werden Argumente genannt ([Python-Dokumentation](https://docs.python.org/3/faq/programming.html#faq-argument-vs-parameter)).

```
print(*objects, sep=' ', end='\n', file=None, flush=False)
```

`*objects`, `sep`, `end`, `file` und `flush` sind die Parameter der Funktion `print()`. 

  - Parameter ohne vorangestelltes Gleichheitszeichen `=` müssen beim Funktions- bzw. Methodenaufruf übergeben werden. Parameter mit vorangestellten Gleichheitszeichen `=` können beim Aufruf übergeben werden, es handelt sich um optionale Parameter.

  - Die Werte hinter dem Gleichheitszeichen zeigen die Standardwerte (default value) der Parameter an. Diese werden verwendet, wenn ein Argument nicht explizit beim Aufruf übergeben wird.

::: {#tip-standardwerte .callout-tip collapse="true"}
## Ausnahmen bei Standardwerten
Bei den in der Funktionsdefinition genannten Werten handelt es sich nicht immer um die tatsächlichen Standardwerte. Es empfiehlt sich deshalb, wenn eine Funktion verwendet wird, die Beschreibung der Parameter zu lesen.

Einige Funktionen verwenden das Schlüsselwort `None` zur Kennzeichnung des Standardwerts. Der Wert `None` dient dabei als Platzhalter.
Ein Beispiel ist die NumPy-Funktion [numpy.loadtxt()](https://numpy.org/doc/stable/reference/generated/numpy.loadtxt.html). 

```
numpy.loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, /
              skiprows=0, usecols=None, unpack=False, ndmin=0, encoding=None, max_rows=None, /
              *, quotechar=None, like=None)
```

  - Für den Parameter `delimiter` ist als Standardwert das Schlüsselwort `None` eingetragen. Wie der Funktionsbeschreibung zu entnehmen ist, ist der Standartwert tatsächlich das Leerzeichen: "The default is whitespace."

  - Auch der Parameter `usecols` hat den Standarwert `None`: "The default, None, results in all columns being read."

Ein weiteres Beispiel ist die Funktion [pandas.read_csv()](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html#pandas.read_csv). Einige Argumente haben den Standardwert `<no_default>`. (Im Folgenden werden nur ausgewählte Parameter gezeigt).

```
pandas.read_csv(sep=<no_default>, verbose=<no_default>)
```

Aus der Beschreibung können die tatsächlichen Standardwerte abgelesen werden:  
sep : str, default ‘,’  
verbose : bool, default False  

:::

  - Argumente können in Python entweder als positionales Argument übergeben werden, das heißt, Python erwartet Argumente in einer feststehenden Reihenfolge entsprechend der Parameter der Funktionsdefinition. Alternativ können Argumente als Schlüsselwort übergeben werden, die Zuordnung von Eingaben erfolgt über den Namen des Parameters. Standardmäßig können Argumente positional oder per Schlüsselwort übergeben werden. Abweichungen davon werden durch die Symbole `*` und `/` gekennzeichnet (siehe folgenden Tipp).

::: {#tip-sonderzeichen .callout-tip collapse="true"}
## Positionale und Schlüsselwortargumente, *args und **kwargs
Die Symbole `*` und `/` zeigen an, welche Parameter positional und welche per Schlüsselwort übergeben werden können bzw. müssen.

:::: {.border}

| Linke Seite | Trennzeichen | Rechte Seite |
|:---:|:---:|:---:|
| nur positionale Argumente | / | positionale oder Schlüsselwortargumente |
| positionale oder Schlüsselwortargumente | * | nur Schlüsselwortargumente |

(<https://realpython.com/python-asterisk-and-slash-special-parameters/>)
::::

&nbsp;

Ein Beispiel für das Trennzeichen `*` ist die Funktion `glob` aus dem gleichnamigen Modul. Der Parameter `pathname` kann positional (an erster Stelle) oder als Schlüsselwort übergeben werden. Die übrigen Parameter müssen als Schlüsselwortargumente übergeben werden.

```
glob.glob(pathname, *, root_dir=None, dir_fd=None, recursive=False, include_hidden=False)
```

Beide Steuerzeichen können innerhalb einer Funktionsdefinition vorkommen, allerdings nur in der Reihenfolge `/` und `*`. Im umgekehrten Fall wäre es unmöglich, Argumente zu übergeben. Ein Beispiel ist die Funktion `sorted`. Der erste Parameter muss positional übergeben werden, die Parameter `key` und `reverse` müssen als Schlüsselworte übergeben werden.

```
sorted(iterable, /, *, key=None, reverse=False)¶
```

:::: {.callout-warning appearance="simple"}
## Ausnahmen
Einige Funktionen weichen von der Systematik ab, beispielsweise die Funktionen `min()` und `max()`. Diese sind (u. a.) in der Form definiert:

```
min(iterable, *, key=None)
max(iterable, *, key=None)
```

Beide Funktionen akzeptieren den Parameter `iterable` aber nicht als Schlüsselwort.
::::

Vielen Funktionen können beliebig viele Argumente positional oder als Schlüsselwort übergeben werden. Im Allgemeinen wird dies durch die Schlüsselwörter `*args` (positionale Argumente) und `**kwargs` (key word arguments, Schlüsselwortargumente) angezeigt. Der Unterschied wird durch das eine bzw. die beiden Sternchen markiert, die Schlüsselwörter selbst sind austauschbar (wie bei der Funktion `print(*objects)`). Das Schlüsselwort `*args` entspricht zugleich dem Symbol `*` in der Funktionsdefinition, d. h. rechts davon dürfen nur Schlüsselwortargumente stehen. Weitere Informationen dazu finden Sie [hier](https://book.pythontips.com/en/latest/args_and_kwargs.html).
:::

In der Funktionsdefinition von `print()` ist `*objects` also ein positionaler Parameter (dieser steht immer an erster Stelle), der keinen Standardwert hat und dem beliebig viele Argumente übergeben werden können (n Eingaben stehen an den ersten n-Stellen). Die weiteren Parameter der Funktion `print()` sind optional und müssen als Schlüsselwort übergeben werden.

## Aufgaben Funktionen
1. Richtig oder falsch: Methoden stehen abhängig vom Datentyp eines Werts oder eines Objekts zur Verfügung.

2. Geben Sie die drei Werte 1, 2 und 3 mit `print()` aus. Parametrisieren Sie die Funktion so, dass ihre Ausgabe wie folgt aussieht:

```{python}
#| echo: false

print(1, 2, 3, sep = "_x_")
```

3. Schlagen Sie in fer Dokumentation die Funktion [bool()](https://docs.python.org/3/library/functions.html#bool) nach.

  - Welche Parameter nimmt die Funktion entgegen und welche davon sind optional?

  - Welche Argumente werden positional und welche als Schlüsselübergeben? Ist die Art der Übergabe wählbar oder festgelegt?

::: {.callout-tip collapse="true"}
## Lösungen
Aufgabe 1: richtig

Aufgabe 2
```{python}
#| output: false

print(1, 2, 3, sep = "_x_")
```

Aufgabe 3: Die Funktion bool() hat ein optionales Argument object mit dem Standardwert False. Das Argument muss positional übergeben werden.
:::

## Flusskontrolle
Die Flusskontrolle ermöglicht es, die Ausführung von Programmteilen zu steuern. Anweisungen können übersprungen oder (mehrfach) ausgeführt werden.

### Abzweigungen
Abzweigungen ermöglichen eine Fallunterscheidung, bei der verschiedene Teile des Skripts ausgeführt werden.

In Python werden Abzweigungen mit dem `if` Schlüsselwort eingeleitet. Dieses wird von der Abzweigbedingung gefolgt und mit einem Doppelpunkt `:` abgeschlossen. Falls die Abzweigbedingung wahr ist, wird der eingerückte Anweisungsblock ausgeführt.

```
if Bedingung:
    Anweisungsblock
    Anweisungsblock
```

``` {python}
# Beispiel: Zahl kleiner als ein Schwellwert

a = 7
if a < 10:
    print( 'Die Zahl', a, 'ist kleiner als 10.')
```

Es ist auch möglich einen alternativen Anweisungsblock zu definieren, welcher ausgeführt wird, wenn die Bedingung falsch ist. Dieser wird mit dem `else` Schlüsselwort umgesetzt.

```
if Bedingung:
    # Bedingung ist wahr
    Anweisungsblock
else:
    # Bedingung ist falsch
    Anweisungsblock
```

``` {python}
# Beispiel: Zahl kleiner als ein Schwellwert mit alternativer Ausgabe

a = 13
if a < 10:
    print( 'Die Zahl', a, 'ist kleiner als 10.')
else:
    print( 'Die Zahl', a, 'ist nicht kleiner als 10.')
```

Es können auch mehrere Bedingungen übergeben werden.
``` {python}
# Beispiel: Zahl im Wertebereich zwischen 10 und 20

a = 1
if a < 20 and a > 10:
    print( 'Die Zahl', a, 'liegt zwischen 10 und 20.')
else:
    print( 'Die Zahl', a, 'liegt nicht zwischen 10 und 20.')
```

Schließlich können mehrere alternative Bedingungen geprüft werden. Dies ist zum einen durch das Verschachteln von Abzweigungen möglich.
```{python}
# Beispiel: Zahl im Wertebereich zwischen 10 und 20 mit verschachtelten Abzweigungen

a = 12
if a > 10:
    print( 'Die Zahl', a, 'ist größer als 10.' )
    
    if a < 20:
        print( 'Die Zahl', a, 'ist kleiner als 20.' )
        print( 'Damit liegt die Zahl zwischen 10 und 20.')
    else:
        print( 'Die Zahl', a, 'ist größer als 20 und liegt nicht im gesuchten Wertebereich.' )
else:
        print( 'Die Zahl', a, 'ist kleiner als 10 und liegt nicht im gesuchten Wertebereich.' )
```

Zum anderen ist dies mit dem Schlüsselwort `elif` möglich.
```{python}
# Beispiel: Zahl im Wertebereich zwischen 10 und 20 mit elif

a = 112
if a < 20 and a > 10:
  print('Die Zahl', a, 'liegt zwischen 10 und 20.')
elif a < 10:
  print('Die Zahl', a, 'ist kleiner als 10 und liegt nicht im gesuchten Wertebereich.' )
elif a > 20 and a <= 100:
  print('Die Zahl', a, 'ist größer als 20, aber nicht größer als 100.')
elif a > 20 and a <= 1000:
  print('Die Zahl', a, 'ist größer als 20, aber nicht größer als 1000.')
else:
  print('Die Zahl', a, 'liegt nicht zwischen 10 und 20 und ist größer als 1000.')
```

### Schleifen
Schleifen ermöglichen es, Anweisungen zu wiederholen. In Python können `while`- und `for`-Schleifen definiert werden. Beide benötigen:

  - einen **Schleifenkopf**, welcher die Ausführung des Anweisungsblocks steuert, und
  
  - einen **Anweisungsblock**, also eine Gruppe von Anweisungen, welche bei jedem Schleifendurchlauf ausgeführt werden.

Die `while`-Schleife kommt mit nur einer Bedingung im Schleifenkopf aus und ist die allgemeinere von beiden. Jede `for`-Schleife kann zu einer `while`-Schleife umgeschrieben werden (indem ein Zähler in den Anweisungsblock integriert wird.) 
Welcher der beiden Typen verwendet wird, hängt von der jeweiligen Aufgabe ab.

#### while-Schleifen
Eine `while`-Schleife für den Anweisungsblock immer wieder aus, solange die Ausführbedingung wahr ist. Die Schleife wird mit dem Schlüsselwort `while` eingeleitet, gefolgt von der Ausführbedingung. Dieser Schleifenkopf wird mit einem Doppelpunkt `:` abgeschlossen. Darunter wird der eingerückte Anweisungsblock definiert.

```
while Bedingung:
    Anweisungsblock
```

Beim Beginn der Schleife und nach jedem Durchlauf wird die Bedingung geprüft. Ist sie wahr, so wird der Anweisungsblock ausgeführt, wenn nicht, ist die Schleife beendet und die nächste Anweisung außerhalb der Schleife wird ausgeführt.

```{python}
# Beispiel: Erhöhen eines Variablenwertes

# Setzte Startwert
a = 5

# Definiere Schleife, welche solange ausgeführt 
# wird, wie a kleiner als 10 ist
while a <= 10:
    # Anweisungsblock der Schleife:
    
    # 1. Ausgabe des aktuellen Werts von a 
    print('aktueller Wert von a', a)
    
    # 2. Erhöhung von a um Eins
    a += 1

# Ausgabe des Wertes nach der Schleife
print('Wert von a nach der Schleife', a)
```

#### for-Schleifen
Während die `while`-Schleife ausgeführt wird, solange eine Bedingung erfüllt ist, wird die `for`-Schleife über eine Laufvariable gesteuert, die eine Sequenz durchläuft. Die Syntax sieht wie folgt aus:

```
for Laufvariable in Sequenz:
  Anweisungsblock
```

Zur Definition des Schleifenkopf gehören die beiden Schlüsselworte `for` und `in` und der Kopf wird mit einem Doppelpunkt `:` abgeschlossen. Auch hier wird der Anweisungsblock eingerückt. Die Sequenz wird mit einem range-Objekt erstellt, das mit `range(start = 0, stop, step = 1)` erzeugt wird (siehe folgendes Beispiel).

::: {#nte-range .callout-note collapse="true"}
## Unnützes Wissen zum Angeben: Alles was Sie nicht über range wissen müssen
Auch wenn es so aussieht, ist `range()` [keine Funktion, sondern eine Sequenz](https://docs.python.org/3/library/functions.html#func-range). Dieser Unterschied ist in der Praxis kaum relevant. Wenn Sie genau wissen möchten, was `range()` ist, finden Sie [hier](https://treyhunner.com/2018/02/python-range-is-not-an-iterator/) eine gute Erklärung.
:::

**exklusives Zählen in Python**

### Aufgaben Flusskontrolle
1. Schreiben Sie ein Programm, dass von 1 bis 25 und von 38 bis 50 zählt und jeden Wert, der ganzzahlig durch 7 teilbar ist, mit `print()` ausgibt.

## Funktionen definieren
Das Definieren eigener Funktionen eröffnet vielfältige Möglichkeiten und gehören zu den mächtigsten Werkzeugen in Python:

  - Komplexe Programme können mit einer einzigen Zeile Code aufgerufen und ausgeführt werden.

  - Funktionen können praktisch beliebig oft aufgerufen werden und sind durch den Einsatz von Parametern und Methoden der Flusskontrolle gleichzeitig in der Lage, flexibel auf wechselnde Bedingungen zu reagieren.

  - Funktionen machen Programmcode kürzer und lesbarer. Außerdem gint es nur eine Stelle, welche bei Änderungen angepasst werden muss.

 eine der vielseitigsten M
It’s important to note that the optional argument must always appear after any required arguments when defining the function

using positional Arguments

*args wird verwendet, um eine variable Anzahl von nicht-schlüsselwortlichen Argumenten zu empfangen. Innerhalb der Funktion wird args als eine Tuple behandelt, die alle übergebenen Argumente enthält.


using Keyword Arguments in Python

**kwargs ist ähnlich wie *args, aber es wird verwendet, um eine variable Anzahl von schlüsselwortbasierten Argumenten zu empfangen. Innerhalb der Funktion wird kwargs als ein Dictionary behandelt.

Keyword arguments allow developers to specify which arguments should have which values when calling a Python function. This is especially useful if order isn’t important. To use keyword arguments, pass in a dictionary with the keyword and its associated value as an argument. For example:

my_dict = {"optional_arg1": 42} func_name(required_arg1, required_arg2, **my_dict)

Ausgabe: return-statement

### Kontrollstrukturen

#### Fallunterscheidung if

#### Schleifen while, for

### lambda

(@Arnold-2023-schleifen-abzweigungen)