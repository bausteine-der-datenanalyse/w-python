# Funktionen
Funktionen sind Unterprogramme, die Programmanweisungen bündeln, damit Programmteile mehrfach verwendet werden können. Auf diese Weise kann ein Programm schneller geschrieben werden und ist auch leichter lesbar. Python bringt, wie Sie der [Dokumentation](https://docs.python.org/3/library/functions.html) entnehmen können, eine überschaubare Anzahl von grundlegenden Funktionen mit. Durch das Laden von Modulen können weitere Funktionen hinzugefügt werden. Außerdem können eigene Funktionen definiert werden. In diesem Kapitel wird die allgemeine Verwendung von Funktionen in Python sowie das Erstellen eigener Funktionen vermittelt.

Eine vollständige Beschreibung der in Python verfügbaren Funktionen ist nicht nur wegen des Umfangs - einige Funktionen haben dutzende dokumentierte Argumente - unmöglich. Auch kann Python umfangreich durch Module erweitert werden und wird dynamisch weiterentwickelt: regelmäßig erscheinen neue Versionen mit neuen Eigenschaften. In diesem Kapitel wird deshalb mit einer Reihe von Tipps auch vermittelt, wie die Dokumentation von Python zu lesen ist.

::: {#tip-dokumentation .callout-tip collapse="false"}
## Dokumentation
Der wichtigste Tipp zuerst: **Benutzen Sie die Dokumentation!** Auch wenn Sie eine Funktion kennen: Vergewissern Sie sich regelmäßig, dass Sie noch auf dem neuesten Stand sind. Auf diese Weise erhalten Sie einen vollständigen Überblick über standardmäßig gesetzte und optional verfügbare Parameter. Außerdem erkennen Sie Änderungen in der Programmausführung und vermeiden so unerwartete Fehler.

:::: {layout="[1, 1]"}

![Neuerung in Python](skript/00-bilder/added-in-pyhton.png){fig-alt="Hinweis auf eine Neuerung in Python"}

![Abkündigung in Python](skript/00-bilder/deprecated-in-python.png){fig-alt="Hinweis auf eine Abkündigung in Python"}

::::

**ergänzen: Die Python-Dokumentation ist schwer zu lesen (Fachbegriffe, knappe Notation), stellenweise unvollständig (fehlende Erläuterungen, Beispiele usw.) ... als aufbauender Tipp.**
:::

## Funktionen und Methoden
In Python gibt es zwei Arten von Funktionen: Funktionen und Methoden.

Funktionen werden über ihren Funktionsnamen gefolgt von runden Klammern `()` aufgerufen. Ein Beispiel für eine Funktion ist print(), der Objekte unabhängig von ihrem Datentyp übergeben werden können.

```{python}
var_str = 'ABC'
var_int = 26
var_bool = True

print("Die Variable var_1 hat den Typ", type(var_str))
print("Die Variable var_2 hat den Typ", type(var_int))
print("Die Variable var_3 hat den Typ", type(var_bool))
```

Methoden sind eine Besonderheit objektorientierter Programmiersprachen. Im vorherigen Kapitel wurde erläutert, dass in Python Variablen bzw. Objekte abhängig von den in ihnen gespeicherten Werte einen passenden Datentyp erhalten. Methoden sind Funktionen, die zu einem bestimmten Datentyp gehören. Methoden werden getrennt durch einen Punkt `.` hinter Objekten mit ihrem Namen aufgerufen: `Variable.Methode` bzw. `(Wert).Methode`. Die Methoden `.upper()`, `.lower()` und `.title` sind für Zeichenfolgen definierte Methoden.

```{python}
toller_text = "Python 3.12 ist großartig."

print(toller_text)
print(toller_text.upper())
print(toller_text.lower())
print(toller_text.title(), "\n")

print(("Mit in Klammern gesetzten Werten klappt es auch.").upper())
```

Auf Objekte mit einem falschen Datentyp können Methoden wie `.lower()` nicht angewendet werden.

```{python}
try:
  var_int.upper()
except AttributeError as error:
  print(error)
```

## Argumente
Vielen Funktionen und Methoden können getrennt durch Kommata mehrere Argumente übergeben werden. Argumente steuern die Programmausführung. Argumente werden auch als Parameter bezeichnet.

```{python}
print("Die Funktion print wurde schon oft gezeigt.", "Das ist das zweite Argument.")
```

Die für die Funktion print() verfügbaren Argumente stehen in der [Dokumentation der Funktion](https://docs.python.org/3/library/functions.html#print). 

```
print(*objects, sep=' ', end='\n', file=None, flush=False)
```

  - Argumente ohne vorangestelltes Gleichheitszeichen `=` müssen beim Funktions- bzw. Methodenaufruf übergeben werden. Argumente mit vorangestellten Gleichheitszeichen `=` können beim Aufruf übergeben werden, es handelt sich um optionale Argumente.

  - Argumente können in Python entweder als positionales Argument übergeben werden, das heißt Python ordnet Eingaben entsprechend ihrer Reihenfolge Argumenten zu. Alternativ können Argumente als Schlüsselwort übergeben werden, die Zuordnung von Eingaben erfolgt über den Namen des Arguments.

  - das vorangestellte Sternchen vor einem Argument `*objects` entspricht einem Platzhalter für eine beliebige Anzahl von Argumenten.

`*objects` ist also ein positionales Argument (es steht immer an erster Stelle), das keinen Standardwert hat und dem beliebig viele Argumente übergeben werden können (n Eingaben stehen also an den ersten n-Stellen). Dadurch, dass beliebig viele Argumente übergeben werden können, funktioniert auch ein leerer Aufruf der Funktion print(), obwohl das Argument `*objects` verpflichtend übergeben werden muss.

Die weiteren Argumente der Funktion print können als Schlüsselwort übergeben werden. Die Werte hinter dem Gleichheitszeichen zeigen die Standardwerte (default value) der Argumente an. Diese werden verwendet, wenn ein Argument nicht explizit beim Aufruf übergeben wird.

**Geben Sie die drei Werte 1, 2 und 3 mit print() aus. Parametrisieren Sie die Funktion so, dass ihre Ausgabe wie folgt aussieht:**

```{python}
#| echo: false

print(1, 2, 3, sep = "_x_")
```

::: {.callout-tip collapse="true"}
## Lösung

```{python}
#| output: false

print(1, 2, 3, sep = "_x_")
```

:::

::: {#tip-standardwert .callout-tip collapse="false"}
## Standardwert None
Einige Funktionen verwenden das Schlüsselwort `None` zur Kennzeichnung des Standardwerts. 
Ein Beispiel ist die NumPy-Funktion [numpy.loadtxt()](https://numpy.org/doc/stable/reference/generated/numpy.loadtxt.html). 

```
numpy.loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding=None, max_rows=None, *, quotechar=None, like=None)
```

Für das Argument `delimiter` ist als Standardwert das Schlüsselwort `None` eingetragen. Wie der Funktionsbeschreibung zu entnehmen ist, ist der Standartwert tatsächlich das Leerzeichen: "The default is whitespace."

Auch das Argument `usecols` hat den Standarwert `None`. Dies bedeutet aber: "The default, None, results in all columns being read."
:::

**Eventuell als Beispiel oder eingeklappter Tipp (weil mir für Fortgeschrittene wichtig) ergänzen**: Trennzeichen und *args und **kwards in der Funktionsdokumentation

::: {.border}

| Linke Seite | Trennzeichen | Rechte Seite |
|:---:|:---:|:---:|
| nur positionale Argumente | / | positionale oder Schlüsselwortargumente |
| positionale oder Schlüsselwortargumente | * | nur Schlüsselwortargumente |
https://realpython.com/python-asterisk-and-slash-special-parameters/

Beide Steuerzeichen können innerhalb einer Funktionsdefinition vorkommen, allerdings nur in der Reihenfolge `/` und `*`. Im umgekehrten Fall wäre es unmöglich, Argumente zu übergeben. 
:::

Beispiele sind glob... und ?!

Ausgabe: return-statement

 Funktionen müssen immer einen Wert zurückgeben. Wenn Funktionen keinen Wert zurückgeben können oder sollen, wird der Wert `None` zurückgegeben, der nicht existente Werte kennzeichnet.




**Mögliche Aufgabe: Erklären, dass Methoden auch Argumente haben... nachgucken lassen, welche Argumente die str.methoden haben**

::: {#tip-argumente .callout-tip collapse="false"}
## Dokumentation
verpflichtende und optionale Argumente: Welche Argumente muss man übergeben (die ohne =), welche kann man übergeben (die mit =).
**Einige Funktionen haben dutzende dokumentierte Argumente und können über die Platzhalter \*args und \*\*kwargs weitere Argumente aufnehmen.**
Bedeutung des Sterns: (Aus glob:) Das Argument `pathname` kann als Schlüsselwort oder positional übergeben werden, die übrigen Argumente müssen als Schlüsselwort übergeben werden (dies signalisiert das Zeichen `*`) Das `*`, das positionale Argumente von Schlüsselwortargumenten trennt, kommt in der Dokumentation immer nur einmal vor.
Erklärung *args und \*\*kwargs siehe <https://book.pythontips.com/en/latest/args_and_kwargs.html>  

**wichtig ist auch: leider sind die Startwerte in der Funktionsdokumentation nicht (immer) die default-Werte --- da habe ich ein Beispiel in meiner zuerledigen Liste --- daraus kann man gleich eine Aufgabe machen, den default-Wert heraussuchen zu lassen.**
:::

In den bisherigen Kapiteln haben Sie bereits die Funktion print() kennengelernt, mit der (formatierte) Zeichenfolgen, Variablen und Werte ausgegeben werden können.

```{python}
print("Die Funktion print gibt Zeichenfolgen, Variablen und Werte aus.")
```


## Ausgabe
return-statement
weitere Ausgaben: print() usw.

### `None`-Wert (das wird keine Überschrift)


res = print( 15 )
print(res)


**Beginnen mit print (Funktion und Argumente), dann Funktionen wie round(), format() und string-Methoden wie .upper .lower ins nächste Kapitel schieben... sie sind eine gute Einleitung für die objektorientierte Programmierung (manche funktionieren nur mit Zahlen, andere nur mit Zeichen).

## Funktionen und Methoden
Zahlen: Funktion `round(Wert, Stellen)`. **Hier Querverweis auf Outputformatierung: f-strings, die bereits verwendete Funktion format(), round()... ein paar Funktionen für die Ausgabe von strings ohne '' und ohne ,**

  - print(format(0.1, '.17g')) # 17 signifikante Stellen

  - print(format(0.1, '.17f')) # 17 Stellen nach dem Komma

```{python}
print(round(0.1 + 0.2, 2))
```


Strings: Methoden .lower(), .upper(), .title()
https://www.w3schools.com/python/python_ref_string.asp


Als nächstes Kapitel: Programmsteuerung

### Fallunterscheidung if

### Schleifen while, for

## Eigene Funktionen schreiben

Ich glaube, hier oder spätestens im nächsten Kapitel sollte das Lesen der Dokumentation trainiert werden?!