# Funktionen definieren
In diesem Kapitel wird gezeigt, wie Sie eigene Funktionen definieren können. Das Definieren eigener Funktionen eröffnet vielfältige Möglichkeiten und gehören zu den mächtigsten Werkzeugen in Python:

  - Komplexe Programme können mit einer einzigen Zeile Code aufgerufen und ausgeführt werden.

  - Funktionen können praktisch beliebig oft aufgerufen werden und sind durch den Einsatz von Parametern und Methoden der Flusskontrolle gleichzeitig in der Lage, flexibel auf wechselnde Bedingungen zu reagieren.

  - Funktionen machen Programmcode kürzer und lesbarer. Außerdem gint es nur eine Stelle, welche bei Änderungen angepasst werden muss.

## Syntax

Das Schlüsselwort `def` leitet die Funktionsdefinition ein. Es wird gefolgt vom Funktionsnamen und den Funktionsargumenten, welche in runden Klammern `()` eingeschlossen sind. Der Funktionskopf wird mit einem Doppelpunkt `:` beendet. Der Anweisungsblock der Funktion ist eingerückt. Jede Funktion liefert einen Rückgabewert, welche durch das Schlüsselwort `return` an die aufrufende Stelle zurückgegeben wird. 

``` {python}
#| output: false
def Funktionsname(Argument1, Argument2):
    Anweisungsblock
    return Rückgabewert
```

Damit die Funktion ausfgeführt wird, muss der definierte Funktionsname aufgerufen und werden.

```{python}
# Beispiel 1: Summe der Quadrate

# Definition einer Funktion zur Berechnung der Summe der Quadrate von zwei Argumenten
def sum_quadrate(a, b):
    print('Wert Argument a:', a)
    print('Wert Argument b:', b)
    print(18 * '=')
    summe = a**2 + b**2
    return summe

print(sum_quadrate(6, 7))
```

Der Rückgabewert kann in einer Variablen gespeichert werden.

```{python}
ergebnis = sum_quadrate(6, 7)
print(ergebnis)
```

Dabei kann die in der Funktion enthaltene Ausgabe mit `print()` unnötig sein. Mit Hilfe von optionalen Parametern kann die Programmausführung gesteuert werden. Optionale Parameter müssen nach verpflichtend zu übergebenen Parametern definiert werden. 

```{python}
# Beispiel 2: optionale Argumente

# Definition einer Funktion zur Berechnung der Summe der Quadrate von zwei Argumenten
def sum_quadrate(a, b, output = False):
    if output:
      print('Wert Argument a:', a)
      print('Wert Argument b:', b)
      print(18 * '=')
    summe = a**2 + b**2
    return summe

print(sum_quadrate(42, 7), "\n")
print(sum_quadrate(42, 7, output = True))
```

Gibt es mehrere optionale Parameter, so erfolgt die Zuweisung von Argumenten positional oder über das Schlüsselwort.

```{python}
# Beispiel 3: mehrere optionale Argumente

# Definition einer Funktion zur Berechnung der Summe der Quadrate von zwei Argumenten
def sum_potenzen(a, b, p = 2, output = False):
    if output:
      print('Wert Argument a:', a)
      print('Wert Argument b:', b)
      print('Wert Argument p:', p)
      print(18 * '=')
    summe = a**p + b**p
    return summe

# positionale Übergabe
print(sum_potenzen(42, 7, 3, True), "\n")

# Übergabe per Schlüsselwort
print(sum_potenzen(42, 7, output = True, p = 4))
```

Funktionen können in Python nur genau einen Rückgabewert haben. Trotzdem können mehrere Rückgabewerte mit einem Komma getrennt werden. Python gibt diese als Tupel zurück. **Rückgabe mehrerer Potenzen**  

optionaler Parameter output = true
immer nur ein Rückgabewert... mehrere Rückgabewerte können mit Komma getrennt übergeben werden. tuple unpacking

It’s important to note that the optional argument must always appear after any required arguments when defining the function

using positional Arguments

*args wird verwendet, um eine variable Anzahl von nicht-schlüsselwortlichen Argumenten zu empfangen. Innerhalb der Funktion wird args als eine Tuple behandelt, die alle übergebenen Argumente enthält.


using Keyword Arguments in Python

**kwargs ist ähnlich wie *args, aber es wird verwendet, um eine variable Anzahl von schlüsselwortbasierten Argumenten zu empfangen. Innerhalb der Funktion wird kwargs als ein Dictionary behandelt.

Keyword arguments allow developers to specify which arguments should have which values when calling a Python function. This is especially useful if order isn’t important. To use keyword arguments, pass in a dictionary with the keyword and its associated value as an argument. For example:

my_dict = {"optional_arg1": 42} func_name(required_arg1, required_arg2, **my_dict)

Ausgabe: return-statement

## Lambdas
<https://docs.python.org/3/reference/expressions.html#lambda>