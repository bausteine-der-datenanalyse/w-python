# Python-Code
Python-Code wird in die Konsole eingegeben oder in einer reinen Textdatei, dem Skript, gespeichert. Moderne Python-Interpreter sind nicht auf durch ASCII darstellbare Zeichen limitiert und k√∂nnen auch mit Zeichen aus dem [UTF-8](https://de.wikipedia.org/wiki/UTF-8) Format umgehen. UTF-8 ist eine sehr weit verbreitete Zeichenkodierung, welche das ASCII-Format erweitert und z. B. deutsche Sonderzeichen abbilden kann.

In diesem Abschnitt werden die Grundz√ºge der Programmierung mit Python vermittelt. Sie erfahren, wie Sie Python-Code schreiben, was ein Objekt ist, wie Sie Operationen durchf√ºhren und wie Sie die Ausgabe formatieren k√∂nnen. 

## Python-Code
Bei der Formatierung von Python-Code m√ºssen nur wenige Punkte beachtet werden.

1. Zahlen und Operatoren k√∂nnen direkt eingegeben werden. Text muss in einfache oder Doppelte Anf√ºhrungszeichen gesetzt werden, andernfalls interpretiert Python diesen als Namen einer Funktion oder eines Objekts.

```{python}
print(1 + 2)
print('Hallo Welt!')
text_variable = 'Hallo Python!'
print(text_variable)
```

2. Kommentare werden mit einer vorangestellten `#` gekennzeichnet. Kommentare markieren Code, der nicht ausgef√ºhrt werden soll, oder Erl√§uterungen.

```{python}
# blo√ü nicht √ºbertreiben
# print("Python ist gro√üartig!") # das ist √ºbertrieben
print("Python ist ziemlich gut.") # das ist realistisch
```

3. Ausdr√ºcke m√ºssen in einer Zeile stehen. L√§ngere Ausdr√ºcke k√∂nnen mit dem Zeichen `\` √ºber mehrere Zeilen fortgesetzt werden (hinter `\` darf keine `#` stehen). Innerhalb von Funktionen wie zum Beispiel `print()` k√∂nnen Zeilen nach jedem Komma fortgesetzt werden.

``` {python}
variable1 = 15
variable2 = 25

# Zeilenfortsetzung mit \
summe = variable1 + \
    variable2

# Zeilenfortsetzung innerhalb einer Funktion
print(variable1,
 variable2,
  summe)
```

*In dem obenstehenden Beispiel werden Variablen angelegt. Mit Variablen besch√§ftigten wir uns sp√§ter in diesem Abschnitt. Trotzdem m√∂chte ich Sie bitten, sich variable1 und variable2 nocheinmal kurz anzusehen. Wir kommen sp√§ter darauf zur√ºck.*

4. Die Anzahl der Leerzeichen zwischen Operanden und Operatoren kann beliebig sein.

``` {python}
print(1+0, 1 + 1, 1 +                  2)
```

5. Die Einr√ºckung mit Leerzeichen oder Tabstopps kennzeichnet einen zusammengeh√∂rigen Code-Block. Die for-Schleife f√ºhrt alle Anweisungen im einger√ºckten Ausf√ºhrungsblock aus. Die folgende, nicht einger√ºckte Zeile markiert den Beginn einer neuen, nicht zur Schleife geh√∂rigen Anweisung.

```{python}
for i in range(3):
    print(variable1)
    print(variable2)
print(summe)
```

## Klassen, Typen und Objekte
Python ist eine objektorientierte Programmiersprache. Jedes Objekt geh√∂rt zu einer Klasse, die als Blaupause die *Eigenschaften* und *Verhaltensweisen* des Objekts bestimmt. Objekte "erben" die Eigenschaften der Klasse, zu der sie geh√∂ren. In Python werden Klassen (class) auch Typen (type) genannt (In den Anf√§ngen von Python waren Klassen und Typen noch verschieden). Ein kurzes Beispiel: Abh√§ngig von ihrer Klasse, verhalten sich Objekte anders mit dem Operator `+`.

```{python}
print(type(2), 2 + 2, "Ganzzahlen werden addiert.")
print(type('a'), 'a' + 'a', "Zeichen werden verkettet.")
print(type(True and False), True + False + True, "Logische Werte werden addiert.")
```

Das liegt daran, dass das Verhalten des Operators + f√ºr die Klassen Ganzzahlen ('int'), Zeichenfolgen ('str') und Boolesche Werte ('bool') definiert ist. Anders verh√§lt es sich mit `None`, also nicht existenten Werten:

```{python}
try:
  None + None
except TypeError as error:
  print(error)
```

Python kennt sehr viele Typen (Klassen).

::: {.border}
![Datentypen in Python](skript/00-bilder/python3-standard-type-hierarchy.png){width="60%" fig-alt="Dargestellt ist eine Kategorisierung der Standardtypen in Python. Die Kategorisierung ist nicht vollst√§ndig deckungsgleich zu den in der Dokumentation genannten Kategorien von Datentypen. Der Typ None f√ºr Nullwerte hat keine weitere Unterteilung. Die Kategorie Numbers unterteilt sich in Zahlenwerte (Ganzzahlen, boolsche Wahrheitswerte), reele Zahlen (floats) und komplexe Zahlen. Die Kategorie Sequences unterteilt sich in Unver√§nderliche (Strings, Tuple, Bytes) und Ver√§nderliche (Listen, Byte Arrays). Die Kategorie Set Types unterteilt sich in Sets (Mengen) und Frozen Sets. Die Kategorie Mappings enth√§lt Dictionaries (W√∂rterb√ºcher). Die Kategorie Callable umfasst Funktionen, Methoden und Klassen. Au√üerdem gibt es die Kategorie Module."}

Python 3. The standard type hierarchy. von –ú–∞–∫—Å–∏–º –ü–µ ist lizensiert unter [CC BY SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/deed.de) und abrufbar auf [wikimedia](https://commons.wikimedia.org/wiki/File:Python_3._The_standard_type_hierarchy.png). 2018
:::

&nbsp;

In diesem Abschnitt werden die f√ºr die Datenanalyse wichtigsten Datentypen vorgestellt.

### Zahlen
Zu den Zahlen geh√∂ren Ganzzahlen und boolsche Werte (Wahrheitswerte), Gleitkommazahlen sowie komplexe Zahlen.

#### Ganzzahlen
Ganzzahlen werden standardm√§√üig im Dezimalsystem eingegeben und k√∂nnen positiv oder negativ sein.

```{python}
print(12, -8)
```

Dar√ºber hinaus k√∂nnen Ganzzahlen auch in anderen Basen angegeben werden:

* Dualsystem: Ziffern `0` und `1` mit einem `0b` Prefix
```{python}
print(0b1000, "plus", 0b0000, "plus", 0b0010, \
      "plus", 0b0001, "ist", 0b1011)
```

* Oktalsystem: Ziffern `0` bis `7` mit einem `0o` Prefix
```{python}
print(0o7000, "plus", 0o0700, "plus", 0o0020, \
      "plus", 0o0000, "ist", 0o7720)
```

* Hexadezimalsystem: Ziffern `0` bis `F` mit einem `0x` Prefix
```{python}
print(0xF000, "plus", 0x0200, "plus", 0x00A0, \
      "plus", 0x0001, "ist", 0xF2A1)
```

#### Gleitkommazahlen
Gleitkommazahlen werden entweder mit dem Dezimaltrennzeichen `.` oder in Exponentialschreibweise angegeben. Gleitkommazahlen haben den Typ `float`.

```{python}
print(120.6, 1206e-1, 12060e-2, "\n")

print("Beim Lottogewinn in Exponentialschreibeweise z√§hlt das Vorzeichen.")
print(1e-7, "oder", 1e+7)
```

Da Computer im Bin√§rsystem arbeiten, k√∂nnen Dezimalzahlen nicht exakt gespeichert werden. Beispielsweise ist die Division von 1 durch 10 dezimal gleich 0.1. Bin√§r ist 1~2~ durch 1010~2~ aber ein periodischer Bruch:
$$ \frac{1_2}{1010_2} ~ {=} ~ 0,000\overline{1100}_2 $$

Dezimalzahlen m√ºssen deshalb als Bruch zweier Ganzzahlen approximiert werden (Der Bin√§rbruch, der 0.1 ann√§hert, ist in Dezimalschreibweise 3602879701896397 / 2^55^). Dadurch kommt es vor, dass mehrere Gleitkommazahlen durch die selbe Bin√§rapproximation repr√§sentiert werden. Python gibt zwar die jeweils k√ºrzeste Dezimalzahl aus, da Berechnungen aber bin√§r durchgef√ºhrt werden, kann sich bei Berechnungen die n√§chste Bin√§rapproximation und damit die zugeh√∂rige k√ºrzeste Dezimalzahl √§ndern (weitere Informationen in der [Python Dokumentation](https://docs.python.org/3/tutorial/floatingpoint.html)). 

```{python}
print(0.1) # Die k√ºrzeste Dezimalzahl zur Bin√§rapproximation
print(format(0.1, '.17g')) # Die n√§chstl√§ngere Dezimalzahl zur selben Bin√§rapproximation
print(0.3 - 0.2) # bin√§r gerechnet, √§ndert sich die Bin√§rapproximation
```

In der praktischen Arbeit mit Python kommen deshalb gelegentlich auf den ersten Blick ungew√∂hnlich wirkende Ergebnisse vor.
```{python}
print(0.1 + 0.2)
print(0.01 + 0.02)
print(0.001 + 0.002)
print(0.0001 + 0.0002)
print(0.00001 + 0.00002)
```

### Arithmetische Operatoren
Mit arithmetischen Operatoren k√∂nnen die Grundrechenarten verwendet werden. Das Ergebnis ist meist vom Typ `float`, au√üer, wenn beide Operanden vom Typ `int` sind und das Ergebnis als ganze Zahl darstellbar ist.

| Operator | Beschreibung |
| :--: | :--: |
| `+`, `-` |  Addition / Subtraktion |
| `*`, `/` | Multiplikation / Division |
| `//`, `%` | Ganzzahlige Division / Rest | 
| `**`| Potenzieren |

Werden mehrere Operatoren kombiniert, so muss deren Reihenfolge beachtet bzw. durch die Verwendung von Klammern `(1 + 2) * 3` hergestellt werden. Grunds√§tzlich gelten die gleichen Regeln wie beim schriftlichen Rechen. Die vollst√§ndige √úbersicht der Reihenfolge der Ausf√ºhrung ist in der [Pythondokumentation](https://docs.python.org/3/reference/expressions.html#operator-precedence) aufgef√ºhrt. F√ºr die arithmethischen Operatoren gilt folgende, absteigende Reihenfolge.

| Operator |
| :--: |
| `**` |
| `*` , `/` , `//` , `%` |
| `+` , `-` |

Bei gleichrangigen Operationen werden diese von links nach rechts ausgef√ºhrt.

### Aufgaben Zahlen
**L√∂sen Sie die folgenden Aufgaben mit Python.**

1. 4 + 2 * 4 = ?
2. 2 hoch 12 = ?
3. Was ist der Rest aus 315 geteilt durch 4?
4. ùü£ + ùü§<sup>6</sup> / ùüß = ?
5. Welche Dezimalzahl ist 11111101001~2~ ?
6. 11111101001~2~ / 101~2~ = ?
7. Welcher Kapitalertrag ist gr√∂√üer, wenn 1000 Euro angelegt werden?

    a) 20 Jahre Anlagedauer mit 3 Prozent j√§hrlicher Rendite

    b) 30 Jahre Anlagedauer mit 2 Prozent j√§hrlicher Rendite

**Die Musterl√∂sung kann Marc machen.**

::: {.callout-tip collapse="true"}
## Musterl√∂sung Zahlen
:::

### Boolsche Werte
Die boolschen Werte `True` und `False` sind das Ergebnis logischer Abfragen, die wir sp√§ter genauer kennenlernen. Sie nehmen auch die Werte `1` und `0` an und geh√∂ren in Python deshalb zu den Zahlen.
```{python}
print("Ist 10 gr√∂√üer als 9?", 10 > 9)
print("Ist 11 kleiner als 10?", 11 < 10)
print("Ist 10 genau 10.0?", 10 == 10.0, "\n")

print("True und False k√∂nnen mit + addiert:", True + False)
print("... und mit * multipliziert werden:", True * False, "\n")
```

Die Multiplikation von Wahrheitswerten ist n√ºtzlich, um mehrere logische Abfragen zu einem logischen UND zu kombinieren:
```{python}
print("Ist 10 > 9 UND > 8?", (10 > 9) * (10 > 8))
```

Die Funktion `bool()` gibt den Wahrheitswert eines Werts zur√ºck.
```{python}
print("Ist 10 > 9 UND > 8?", bool((10 > 9) * (10 > 8)))
```

Die meisten Werte in Python haben den Wahrheitswert `True`.
```{python}
print(bool(1), bool(2), bool(2.4))
print(bool('a'), bool('b'), bool('ab'))
```

Neben `False` und `0` haben leere und nicht existierende Werte und Objekte den Wahrheitswert `False`.

```{python}
print(bool(False), bool(0))
print(bool("")) # eine leere Zeichenfolge
print(bool([])) # eine leere Liste
print(bool(())) # eine leeres Tupel
print(bool({})) # ein leeres Dictionary
print(bool(None)) # None deklariert einen nicht existenten Wert
```

Die Sammeltypen Liste, Tupel und Dictionary werden wir sp√§ter kennenlernen. Boolsche Werte k√∂nnen die Ausf√ºhrung von Programmcode steuern, indem sie wie `an` und `aus` wirken. So kann Programmcode mit einer `if`-Anweisung nur dann ausgef√ºhrt werden, wenn ein Sammeltyp auch Werte enth√§lt.

```{python}
meine_Liste = ['√Ñpfel', 'Butter']
if meine_Liste:
    print(f"Wir m√ºssen {meine_Liste} einkaufen.")

meine_Liste = [] # eine leere Liste
if meine_Liste:
    print(f"Wir m√ºssen {meine_Liste} einkaufen.")

```

### Logische Operatoren
Zu den logischen Operatoren geh√∂ren die logischen Verkn√ºpfungen `and`, `or` und `not`. Dar√ºber hinaus k√∂nnen auch vergleichende Operatoren wie `>`, `>=` oder `==` verwendet werden. Das Ergebnis dieser Operationen ist vom Typ `bool`. Die Operatoren werden in folgender Reihenfolge ausgef√ºhrt. Gleichrangige Operatoren werden von links nach rechts ausgef√ºhrt.

| Operator | Beschreibung |
| :--: | :--: |
| `&` | bitweises UND |
| `^` | bitweises XOR |
| `|` | bitweises ODER |
| `<`, `<=`, `>`,  `>=`, `!=`, `==` | kleiner / kleiner gleich / gr√∂√üer als /  gr√∂√üer gleich / ungleich / gleich |
| `not` | logisches NICHT |
| `and`| logisches UND |
| `or` | logisches ODER |

::: {#wrn-bitwise .callout-warning appearance="simple" collapse="false"}
## Bitweise Operatoren
Besondere Vorsicht ist mit den [bitweisen Operatoren](https://wiki.python.org/moin/BitwiseOperators) geboten. Diese vergleichen Zahlen, allerdings nicht als Ganzes, sondern stellenweise (im Bin√§rsystem). Zu beachten ist, dass die bitweisen Operatoren  Ausf√ºhrungspriorit√§t vor Vergleichsoperationen haben.

```{python}
print(10 > 5 and 10 > 6)
print(10 > 5 & 10 > 6)
print((10 > 5) & (10 > 6))
```

:::: {.callout-tip collapse="false"}
Im Allgemeinen werden die bitweisen Operatoren f√ºr die Datenanalyse nicht ben√∂tigt. Vermeiden Sie unn√∂tige Fehler: Vermeiden Sie die bitweisen Operatoren `&`, `^` und `|`.

Die Operatoren `&`, `^` und `|` haben jedoch f√ºr Mengen (die wir sp√§ter kennenlernen werden) eine andere Bedeutung. Auch in anderen Modulen kommt den Operatoren syntaktisch eine andere Bedeutung zu, bspw. im Paket Pandas bei der √úbergabe mehrerer Slicing-Bedingungen `df = df[(Bedingung1) & (Bedingung2) | (Bedingung3)]`.

::::
:::

### Aufgaben boolsche Werte
**L√∂sen Sie die Aufgaben mit Python.**

1. Ist das Verh√§ltnis aus 44 zu 4.5 gr√∂√üer als 10?
2. Ist es wahr, dass 4.5 gr√∂√üer als 4 aber kleiner als 5 ist?
3. Ist 2 hoch 10 gleich 1024?
4. Sind die Zahlen 3, 4 und 5 ganzzahlig durch 2 teilbar ODER ungleich 10?
5. Pr√ºfen Sie, ob eine Person den Vollpreis bezahlen muss, wenn Sie Ihr Alter angibt.  
Kinder unter 14 Jahren fahren kostenlos, Jugendliche zwischen 14 und 18 Jahren und Senior:innen ab 65 Jahren erhalten einen Rabatt.

### Zeichenfolgen
Zeichenfolgen (Englisch string) werden in Python in einfache oder doppelte Anf√ºhrungszeichen gesetzt.

```{python}
print('eine x-beliebige Zeichefolge')
print("noch eine x-beliebige Zeichenfolge")
```

Innerhalb einer Zeichenfolge k√∂nnen einfache oder doppelte Anf√ºhrungszeichen verwendet werden, solange diese nicht den die Zeichenfolge umschlie√üenden Anf√ºhrungszeichen entsprechen.
```{python}
print('A sophisticated heap beam, which we call a "LASER".')
print("I've turned the moon into what I like to call a 'Death Star'.")
```

Das Steuerzeichen `\` (oder Fluchtzeichen, escape character) erlaubt es, bestimmte Sondernzeichen zu verwenden. 
```{python}
print("Mit dem Steuerzeichen \\ funktionieren auch die gleichen \"Anf√ºhrungszeichen\" wie die umschlie√üenden.")
print("Erst ein\tTabstopp, dann eine\nneue Zeile.")
```

## Variablen
Variablen sind Platzhalter bzw. Referenzen auf Daten. Die Zuweisung wird durch den Zuweisungsoperator `=` dargestellt. Der Name einer Variablen darf nur aus Buchstaben, Zahlen und Unterstrichen bestehen. Dabei darf das erste Zeichen keine Zahl sein.

```{python}
var_1 = 'ABC'
var_2 = 26
var_3 = True

print("Das", var_1, "hat", var_2, "Buchstaben. Das ist", var_3)
```

Variablen m√ºssen in Python nicht initialisiert werden. Der Typ der Variablen wird durch die Zuweisung eines entsprechenden Werts festgelegt.

```{python}
print("Die Variable var_1 hat den Typ", type(var_1))
print("Die Variable var_2 hat den Typ", type(var_2))
print("Die Variable var_3 hat den Typ", type(var_3))
```

**Zeigen, wie man den Typ einer Variable bestimmt und √§ndert. (type(x), int(), ord() ... das ist im m-EsD)**


Neuzuweisung (var_1), Berechnung (var_2 / 5)

Erkl√§ren, warum Sie bereits Variablen erstellt und verwendet haben...
Python has no command for declaring a variable.

A variable is created the moment you first assign a value to it.

Variables do not need to be declared with any particular type, and can even change type after they have been set.

### Benennung von Variablen
F√ºr die Benennung von Variablen gibt es (meist) nur wenige Vorgaben. Es empfiehlt sich jedoch "sprechende", das hei√üt selbsterkl√§rende, Variablennamen zu vergeben. Dies verbessert die Lesbarkeit des Codes und vereinfacht die Benutzung der Variable. Unter selbsterkl√§renden Variablennamen versteht sich, dass der Variablenname den Inhalt der Variable beschreibt. Wird bspw. in einer Variable der Studienabschluss gespeichert, so kann diese mit `academic_degree` oder `studienabschluss` bezeichnet werden. Werden Daten aus verschiedenen Jahren verarbeitet, kann das Jahr zu besseren Unterscheidbarkeit in den Variablennamen einflie√üen, etwa: `academic_degree_2023` oder `studienabschluss2024`. Mehr Informationen finden sich in [diesem Wikipedia Abschnitt](https://de.wikipedia.org/wiki/Variable_(Programmierung)#Namenswahl). 

Es ist besser, einen langen, aber ausf√ºhrlichen Variablennamen zu vergeben, als einen kurzen, der sich schnell schreiben l√§sst. Denn Programmcode wird deutlich h√§ufiger gelesen als geschrieben. K√∂nnen Sie sich erinnern? Welcher Wert ist in der Variablen `Var_3` gespeichert, und welche Werte sind in `variable1` und `variable2` gespeichert? Es reicht, wenn Sie den Datentyp korrekt benennen k√∂nnen.

Falls Sie sich nicht erinnern k√∂nnen, dann ist dieses Beispiel gelungen: Die Namensgebung ist alles andere als gut.

::: {.callout-warning}
## Schl√ºsselw√∂rter und Funktionsnamen

In Python reservierte Schl√ºsselw√∂rter und Funktionsnamen sind (selbstverst√§ndlich) ungeeignete Variablennamen. W√§hrend Python die Wertzuweisung zu Schl√ºsselw√∂rtern wie `True` oder `break` mit einem Syntaxfehler quittiert, lassen sich Funktionsnamen problemslos neue Werte zuweisen, beispielsweise mit `print = 6`. Wenn Sie die Funktion dann aufrufen, funktioniert diese nat√ºrlich nicht mehr. In diesem Fall m√ºssen Sie die Zuweisung ggf. aus dem Skript entfernen und Python neu starten.  
:::

## Ausgabe formatieren

Funktion `round(Wert, Stellen)`. **Hier Querverweis auf Outputformatierung: f-strings, die bereits verwendete Funktion format(), round()... ein paar Funktionen f√ºr die Ausgabe von strings ohne '' und ohne ,**

  - print(format(0.1, '.17g')) # 17 signifikante Stellen

  - print(format(0.1, '.17f')) # 17 Stellen nach dem Komma

```{python}
print(round(0.1 + 0.2, 2))
```


**Quelle SA Datenanalyse mit Python. Idee des Kurses 'Datenanalyse mit Python'.**