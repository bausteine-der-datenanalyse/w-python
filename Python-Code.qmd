# Python-Code
Python-Code wird in die Konsole eingegeben oder in einer reinen Textdatei, dem Skript, gespeichert. Moderne Python-Interpreter sind nicht auf durch ASCII darstellbare Zeichen limitiert und können auch mit Zeichen aus dem [UTF-8](https://de.wikipedia.org/wiki/UTF-8) Format umgehen. UTF-8 ist eine sehr weit verbreitete Zeichenkodierung, welche das ASCII-Format erweitert und z. B. deutsche Sonderzeichen abbilden kann.

In diesem Abschnitt werden die Grundzüge der Programmierung mit Python vermittelt. Sie erfahren, wie Sie Python-Code schreiben, was der Unterschied zwischen einem Objekt, seiner Klasse und dem Datentyp ist sowie wie Sie Operationen durchführen und die Ausgabe formatieren können. 

## Python-Code
Bei der Formatierung von Python-Code müssen nur wenige Punkte beachtet werden.

1. Zahlen und Operatoren können direkt eingegeben werden. Text muss in einfache oder doppelte Anführungszeichen gesetzt werden, andernfalls interpretiert Python diesen als Namen einer Funktion oder eines Objekts.

```{python}
print(1 + 2)
print('Hallo Welt!')
text_variable = 'Hallo Python!'
print(text_variable)
```

2. Kommentare werden mit einer vorangestellten `#` gekennzeichnet. Kommentare markieren Code, der nicht ausgeführt werden soll, oder Erläuterungen.

```{python}
# bloß nicht übertreiben
# print("Python ist großartig!") # das ist übertrieben
print("Python ist ziemlich gut.") # das ist realistisch
```

3. Ausdrücke müssen in einer Zeile stehen. Längere Ausdrücke können mit dem Zeichen `\` über mehrere Zeilen fortgesetzt werden (hinter `\` darf keine `#` stehen). Innerhalb von Funktionen wie zum Beispiel `print()` können Zeilen nach jedem Komma fortgesetzt werden.

``` {python}
variable1 = 15
variable2 = 25

# Zeilenfortsetzung mit \
summe = variable1 + \
    variable2

# Zeilenfortsetzung innerhalb einer Funktion
print(variable1,
 variable2,
  summe)
```

*In dem obenstehenden Beispiel werden Variablen angelegt. Mit Variablen beschäftigten wir uns später in diesem Abschnitt. Trotzdem möchte ich Sie bitten, sich variable1 und variable2 nocheinmal kurz anzusehen. Wir kommen später darauf zurück.*

4. Die Anzahl der Leerzeichen zwischen Operanden und Operatoren kann beliebig sein.

``` {python}
print(1+0, 1 + 1, 1 +                  2)
```

5. Die Einrückung mit Leerzeichen oder Tabstopps kennzeichnet einen zusammengehörigen Code-Block. Die for-Schleife führt alle Anweisungen im eingerückten Ausführungsblock aus. Die folgende, nicht eingerückte Zeile markiert den Beginn einer neuen, nicht zur Schleife gehörigen Anweisung.

```{python}
for i in range(3):
    print(variable1)
    print(variable2)
print(summe)
```

## Klassen, Typen, Objekte und Datentypen
Python ist eine objektorientierte Programmiersprache. Jedes Objekt gehört zu einer Klasse, die als Blaupause die *Eigenschaften* und *Verhaltensweisen* des Objekts bestimmt, etwa welche Daten gespeichert und welche Funktionen ausgeführt werden können. Objekte "erben" die Eigenschaften der Klasse, zu der sie gehören. In Python werden Klassen (class) auch Typen (type) genannt (In den Anfängen von Python waren Klassen und Typen noch verschieden). Ein kurzes Beispiel: Abhängig von ihrer Klasse, verhalten sich Objekte anders mit dem Operator `+`.

```{python}
print(type(2), 2 + 2, "Ganzzahlen werden addiert.")
print(type('a'), 'a' + 'a', "Zeichen werden verkettet.")
print(type(True and False), True + False + True, "Logische Werte werden addiert.")
```

Das liegt daran, dass das Verhalten des Operators + für die Klassen Ganzzahlen ('int'), Zeichenfolgen ('str') und Boolesche Werte ('bool') definiert ist. 
Anders verhält es sich mit `None`, also nicht existenten Werten:

```{python}
try:
  None + None
except TypeError as error:
  print(error)
```

Python kennt sehr viele Typen (Klassen).

::: {.border}
![Datentypen in Python](skript/00-bilder/python3-standard-type-hierarchy.png){width="60%" fig-alt="Dargestellt ist eine Kategorisierung der Standardtypen in Python. Die Kategorisierung ist nicht vollständig deckungsgleich zu den in der Dokumentation genannten Kategorien von Datentypen. Der Typ None für Nullwerte hat keine weitere Unterteilung. Die Kategorie Numbers unterteilt sich in Zahlenwerte (Ganzzahlen, boolsche Wahrheitswerte), reele Zahlen (floats) und komplexe Zahlen. Die Kategorie Sequences unterteilt sich in Unveränderliche (Strings, Tuple, Bytes) und Veränderliche (Listen, Byte Arrays). Die Kategorie Set Types unterteilt sich in Sets (Mengen) und Frozen Sets. Die Kategorie Mappings enthält Dictionaries (Wörterbücher). Die Kategorie Callable umfasst Funktionen, Methoden und Klassen. Außerdem gibt es die Kategorie Module."}

Python 3. The standard type hierarchy. von Максим Пе ist lizensiert unter [CC BY SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/deed.de) und abrufbar auf [wikimedia](https://commons.wikimedia.org/wiki/File:Python_3._The_standard_type_hierarchy.png). 2018
:::

&nbsp;

#### Datentypen
Objekte, die Daten speichern, haben einen Datentyp. Der Datentyp gibt an, wie die gespeicherten Werte von Python interpretiert werden sollen. Beispielsweise kann der Wert "1" ein Zeichen, eine Ganzzahl, einen Wahrheitswert, den Monat Januar oder die Ausprägung einer kategorialen Variablen repräsentieren.

In der Pythonbasis gibt es nur einfache Datentypen wie Ganzzahl oder Gleitkommazahlen, weshalb der Unterschied zwischen Klassen und Datentypen nicht sofort offensichtlich ist. In Python sind die Begriffe manchmal synonym, etwa für die Klasse der Ganzzahlen 'int' und den Datentyp 'int'. Jedes Objekt gehört zu einer Klasse, aber nicht jeder Klasse ist ein Datentyp zuordenbar - beispielsweise sind auch Funktionen Objekte und gehören einer eigenen Klasse an. Die Funktion print speichert aber keine Daten und hat deshalb auch keinen Datentyp.

```{python}
type(print)
```

Deutlicher wird der Unterschied zwischen Klassen und Datentyp erst in spezialisierten Paketen wie NumPy **Querverweis auf w-NumPy** oder Pandas **Querverweis auf w-Pandas**, die weitere Datentypen in Python einführen, wie zum Beispiel Gleitkommazahlen mit 32 Bit (Datentyp 'float32') und 64 Bit Speicherplatzbedarf (Datentyp 'float64'). Objekte vom Datentyp float32 und float64 gehören zur selben Klasse (siehe Beispiel): Sie haben die selben allgemeinen Eigenschaften und Verhaltensweisen. Sie haben aber einen unterschiedlichen Wertebereich und Speicherplatzbedarf - Gleitkommazahlen mit 64 Bit können größere Zahlen speichern, nehmen aber doppelt so viel Platz im Speicher des Computers ein.

::: {#nte-numpypandas .callout-note collapse="true"}
## Datentypen in NumPy und Pandas
Die Module NumPy und Pandas sind wichtige Bausteine für die Datenanalyse mit Python.

```{python}
import numpy as np

float_64 = np.array([1.0])
print("Der Datentyp des Objekts float_64 ist:", float_64.dtype)
print("Das Objekt gehört zur Klasse der n-dimensionalen NumPy-Arrays:", type(float_64), "\n")

float_32 = np.array([1.0], dtype = 'float32')
print("Der Datentyp des Objekts float_32 ist:", float_32.dtype)
print("Das Objekt gehört zur Klasse der n-dimensionalen NumPy-Arrays:", type(float_32))
```

:::

In diesem Abschnitt werden die für die Datenanalyse wichtigsten Datentypen vorgestellt.

### Zahlen
Zu den Zahlen gehören Ganzzahlen und boolsche Werte (Wahrheitswerte), Gleitkommazahlen sowie komplexe Zahlen.

#### Ganzzahlen
Ganzzahlen werden standardmäßig im Dezimalsystem eingegeben und können positiv oder negativ sein.

```{python}
print(12, -8)
```

Darüber hinaus können Ganzzahlen auch in anderen Basen angegeben werden:

* Dualsystem: Ziffern `0` und `1` mit einem `0b` Prefix
```{python}
print(0b1000, "plus", 0b0000, "plus", 0b0010, \
      "plus", 0b0001, "ist", 0b1011)
```

* Oktalsystem: Ziffern `0` bis `7` mit einem `0o` Prefix
```{python}
print(0o7000, "plus", 0o0700, "plus", 0o0020, \
      "plus", 0o0000, "ist", 0o7720)
```

* Hexadezimalsystem: Ziffern `0` bis `F` mit einem `0x` Prefix
```{python}
print(0xF000, "plus", 0x0200, "plus", 0x00A0, \
      "plus", 0x0001, "ist", 0xF2A1)
```

#### Gleitkommazahlen
Gleitkommazahlen werden entweder mit dem Dezimaltrennzeichen `.` oder in Exponentialschreibweise angegeben. Gleitkommazahlen haben den Typ `float`.

```{python}
print(120.6, 1206e-1, 12060e-2, "\n")

print("Beim Lottogewinn in Exponentialschreibeweise zählt das Vorzeichen.")
print(1e-3, "oder", 1e+3)
```

Da Computer im Binärsystem arbeiten, können Dezimalzahlen nicht exakt gespeichert werden. Beispielsweise ist die Division von 1 durch 10 dezimal gleich 0.1. Binär ist 1~2~ durch 1010~2~ aber ein periodischer Bruch:
$$ \frac{1_2}{1010_2} ~ {=} ~ 0,000\overline{1100}_2 $$

Dezimalzahlen müssen deshalb als Bruch zweier Ganzzahlen approximiert werden (Der Binärbruch, der 0.1 annähert, ist in Dezimalschreibweise 3602879701896397 / 2^55^). Dadurch kommt es vor, dass mehrere Gleitkommazahlen durch die selbe Binärapproximation repräsentiert werden. Python gibt zwar die jeweils kürzeste Dezimalzahl aus, da Berechnungen aber binär durchgeführt werden, kann sich bei Berechnungen die nächste Binärapproximation und damit die zugehörige kürzeste Dezimalzahl ändern (weitere Informationen in der [Python Dokumentation](https://docs.python.org/3/tutorial/floatingpoint.html)). 

```{python}
print(0.1) # Die kürzeste Dezimalzahl zur Binärapproximation
print(format(0.1, '.17g')) # Die nächstlängere Dezimalzahl zur selben Binärapproximation
print(0.3 - 0.2) # binär gerechnet, ändert sich die Binärapproximation
```

In der praktischen Arbeit mit Python kommen deshalb gelegentlich auf den ersten Blick ungewöhnlich wirkende Ergebnisse vor.
```{python}
print(0.1 + 0.2)
print(0.01 + 0.02)
print(0.001 + 0.002)
print(0.0001 + 0.0002)
print(0.00001 + 0.00002)
```

### Arithmetische Operatoren
Mit arithmetischen Operatoren können die Grundrechenarten verwendet werden. Das Ergebnis ist meist vom Typ `float`, außer, wenn beide Operanden vom Typ `int` sind und das Ergebnis als ganze Zahl darstellbar ist.

| Operator | Beschreibung |
| :--: | :--: |
| `+`, `-` |  Addition / Subtraktion |
| `*`, `/` | Multiplikation / Division |
| `//`, `%` | Ganzzahlige Division / Rest | 
| `**`| Potenzieren |

Werden mehrere Operatoren kombiniert, so muss deren Reihenfolge beachtet bzw. durch die Verwendung von Klammern `(1 + 2) * 3` hergestellt werden. Grundsätzlich gelten die gleichen Regeln wie beim schriftlichen Rechen. Die vollständige Übersicht der Reihenfolge der Ausführung ist in der [Pythondokumentation](https://docs.python.org/3/reference/expressions.html#operator-precedence) aufgeführt. Für die arithmethischen Operatoren gilt folgende, absteigende Reihenfolge.

| Operator |
| :--: |
| `**` |
| `*` , `/` , `//` , `%` |
| `+` , `-` |

Bei gleichrangigen Operationen werden diese von links nach rechts ausgeführt.

### Aufgaben Zahlen
**Lösen Sie die folgenden Aufgaben mit Python.**

1. 4 + 2 * 4 = ?
2. 2 hoch 12 = ?
3. Was ist der Rest aus 315 geteilt durch 4?
4. 𝟣 + 𝟤<sup>6</sup> / 𝟧 = ?
5. Welche Dezimalzahl ist 11111101001~2~ ?
6. 11111101001~2~ / 101~2~ = ?
7. Welcher Kapitalertrag ist größer, wenn 1000 Euro angelegt werden?

    a) 20 Jahre Anlagedauer mit 3 Prozent jährlicher Rendite

    b) 30 Jahre Anlagedauer mit 2 Prozent jährlicher Rendite

**Die Musterlösung kann Marc machen.**

::: {#tip-lösungzahlen .callout-tip collapse="true"}
## Musterlösung Zahlen
:::

### Boolsche Werte
Die boolschen Werte `True` und `False` sind das Ergebnis logischer Abfragen, die wir später genauer kennenlernen. Sie nehmen auch die Werte `1` und `0` an und gehören in Python deshalb zu den Zahlen.
```{python}
print("Ist 10 größer als 9?", 10 > 9)
print("Ist 11 kleiner als 10?", 11 < 10)
print("Ist 10 genau 10.0?", 10 == 10.0, "\n")

print("True und False können mit + addiert:", True + False)
print("... und mit * multipliziert werden:", True * False, "\n")
```

Die Multiplikation von Wahrheitswerten ist nützlich, um mehrere logische Abfragen zu einem logischen UND zu kombinieren:
```{python}
print("Ist 10 > 9 UND > 8?", (10 > 9) * (10 > 8))
```

Die Funktion `bool()` gibt den Wahrheitswert eines Werts zurück.
```{python}
print("Ist 10 > 9 UND > 8?", bool((10 > 9) * (10 > 8)))
```

Die meisten Werte in Python haben den Wahrheitswert `True`.
```{python}
print(bool(1), bool(2), bool(2.4))
print(bool('a'), bool('b'), bool('ab'))
```

Neben `False` und `0` haben leere und nicht existierende Werte und Objekte den Wahrheitswert `False`.

```{python}
print(bool(False), bool(0))
print(bool("")) # eine leere Zeichenfolge
print(bool([])) # eine leere Liste
print(bool(())) # eine leeres Tupel
print(bool({})) # ein leeres Dictionary
print(bool(None)) # None deklariert einen nicht existenten Wert
```

Die Sammeltypen Liste, Tupel und Dictionary lernen wir in den folgenden Kapiteln kennen. Boolsche Werte können die Ausführung von Programmcode steuern, indem sie wie `an` und `aus` wirken. So kann Programmcode mit einer `if`-Anweisung nur dann ausgeführt werden, wenn ein Sammeltyp auch Werte enthält.

```{python}
meine_Liste = ['Äpfel', 'Butter']
if meine_Liste:
    print(f"Wir müssen {meine_Liste} einkaufen.")

meine_Liste = [] # eine leere Liste
if meine_Liste:
    print(f"Wir müssen {meine_Liste} einkaufen.")

```

### Logische Operatoren
Zu den logischen Operatoren gehören die logischen Verknüpfungen `and`, `or` und `not`. Darüber hinaus können auch vergleichende Operatoren wie `>`, `>=` oder `==` verwendet werden. Das Ergebnis dieser Operationen ist vom Typ `bool`. Die Operatoren werden in folgender Reihenfolge ausgeführt. Gleichrangige Operatoren werden von links nach rechts ausgeführt.

| Operator | Beschreibung |
| :--: | :--: |
| `&` | bitweises UND |
| `^` | bitweises XOR |
| `|` | bitweises ODER |
| `<`, `<=`, `>`,  `>=`, `!=`, `==` | kleiner / kleiner gleich / größer als /  größer gleich / ungleich / gleich |
| `not` | logisches NICHT |
| `and`| logisches UND |
| `or` | logisches ODER |

::: {#wrn-bitwise .callout-warning appearance="simple" collapse="false"}
## Bitweise Operatoren
Besondere Vorsicht ist mit den [bitweisen Operatoren](https://wiki.python.org/moin/BitwiseOperators) geboten. Diese vergleichen Zahlen, allerdings nicht als Ganzes, sondern stellenweise (im Binärsystem). Zu beachten ist, dass die bitweisen Operatoren  Ausführungspriorität vor Vergleichsoperationen haben.

```{python}
print(10 > 5 and 10 > 6)
print(10 > 5 & 10 > 6)
print(5 & 10)
print(10 > False > 6)
print((10 > 5) & (10 > 6))
```

:::: {.callout-tip collapse="false"}
Im Allgemeinen werden die bitweisen Operatoren für die Datenanalyse nicht benötigt. Vermeiden Sie unnötige Fehler: Vermeiden Sie die bitweisen Operatoren `&`, `^` und `|`.

Die Operatoren `&`, `^` und `|` haben jedoch für Mengen (die wir später kennenlernen werden) eine andere Bedeutung. Auch in anderen Modulen kommt den Operatoren syntaktisch eine andere Bedeutung zu, bspw. im Paket Pandas bei der Übergabe mehrerer Slicing-Bedingungen `df = df[(Bedingung1) & (Bedingung2) | (Bedingung3)]`.

::::
:::

### Aufgaben boolsche Werte
**Lösen Sie die Aufgaben mit Python.**

1. Ist das Verhältnis aus 44 zu 4.5 größer als 10?
2. Ist es wahr, dass 4.5 größer als 4 aber kleiner als 5 ist?
3. Ist 2 hoch 10 gleich 1024?
4. Sind die Zahlen 3, 4 und 5 ganzzahlig durch 2 teilbar ODER ungleich 10?
5. Prüfen Sie, ob eine Person den Vollpreis bezahlen muss, wenn Sie Ihr Alter angibt.  
Kinder unter 14 Jahren fahren kostenlos, Jugendliche zwischen 14 und 18 Jahren und Senior:innen ab 65 Jahren erhalten einen Rabatt.

### Zeichenfolgen
Zeichenfolgen (Englisch string) werden in Python in einfache oder doppelte Anführungszeichen gesetzt.

```{python}
print('eine x-beliebige Zeichenfolge')
print("noch eine x-beliebige Zeichenfolge")
```

Innerhalb einer Zeichenfolge können einfache oder doppelte Anführungszeichen verwendet werden, solange diese nicht den die Zeichenfolge umschließenden Anführungszeichen entsprechen.
```{python}
print('A sophisticated heap beam, which we call a "LASER".')
print("I've turned the moon into what I like to call a 'Death Star'.")
```

Das Steuerzeichen `\` (oder Fluchtzeichen, escape character) erlaubt es, bestimmte Sondernzeichen zu verwenden. 
```{python}
print("Das Steuerzeichen \\ ermöglicht die gleichen \"Anführungszeichen\" in der Ausgabe von print.")
print("Erst ein\tTabstopp, dann eine\nneue Zeile.")
```

Ein vorangestelltes `r` bewirkt, dass das Steuerzeichen `\` nicht verarbeitet wird (raw string literal). Dies ist beispielsweise bei der Arbeit mit Dateipfaden praktisch.
```{python}
print("Die Daten liegen unter: C:\tolle_daten\nordpol\weihnachtsmann")
print(r"Die Daten liegen unter: C:\tolle_daten\nordpol\weihnachtsmann")
```

### Operationen mit Zeichenfolgen
Einige Operatoren funktionieren auch mit Daten vom Typ string.

```{python}

# string + string
print('a' + 'b') # -, *, / funktionieren nicht
print("\n")

# string + Zahl
print(15 * 'a') # +, -, / funktionieren nicht
print("\n")

# logische Operatoren
print('a' < 'b', 'a' >= 'b', 'a' != 'b')
print('a' or 'b', 'a' and 'b')
```

### Aufgaben Zeichenfolgen
**Lösen Sie die Aufgaben mit Python.**

1. Was passiert, wenn Sie die Zeichenfolge "Python" mit "for beginners" addieren?
2. Erzeugen Sie eine Zeichenfolge, die 10 mal die Zeichenfolge "tick tack".
3. Welche Zeichenfolge ist kleiner, "Aachen" oder "Bern". Warum ist das so, wie werden Zeichenfolgen verglichen?
4. Geben Sie den Dateipfad aus: "~\home\tobi\neue_daten"

**Die Musterlösung kann Marc machen.**

::: {#tip-lösungstrings .callout-tip collapse="true"}
## Musterlösung Aufgaben Zeichenfolgen

::: 

### Variablen
Variablen sind Platzhalter bzw. Referenzen auf Daten. Die Zuweisung wird durch den Zuweisungsoperator `=` dargestellt. Der Name einer Variablen darf nur aus Buchstaben, Zahlen und Unterstrichen bestehen. Dabei darf das erste Zeichen keine Zahl sein.

```{python}
var_1 = 'ABC'
var_2 = 26
var_3 = True

print("Das", var_1, "hat", var_2, "Buchstaben. Das ist", var_3)
```

Variablen müssen in Python nicht initialisiert werden. Der Datentyp der Variablen wird durch die Zuweisung eines entsprechenden Werts festgelegt.

```{python}
print("Die Variable var_1 hat den Typ", type(var_1))
print("Die Variable var_2 hat den Typ", type(var_2))
print("Die Variable var_3 hat den Typ", type(var_3))
```

Der Datentyp einer Variable ändert sich, wenn ihr ein neuer Wert eines anderen Datentyps zugewiesen wird.
```{python}
var_1 = 100
print("Die Variable var_1 hat den Typ", type(var_1))
```

Ebenso kann sich der Datentyp einer Variable ändern, um das Ergebnis einer Operation aufnehmen zu können. In diesem Beispiel kann das Ergebnis nicht in Form einer Ganzzahl gespeichert werden. Python weist dem Objekt var_1 deshalb den Datentyp 'float' zu. 
```{python}
var_1 = var_1 / 11
print("Die Variable var_1 hat den Typ", type(var_1))
```

Python enthält Funktionen, um den Datentyp einer Variablen zu bestimmen und umzuwandeln. Die Funktion `type()` wurde in den Code-Beispielen bereits benutzt, um den Datentyp (bzw. die Klasse) von Objekten zu bestimmen. Die Umwandlung des Datentyps zeigt der folgende Code-Block.

``` {python}
a = 67 
print(a, type(a))

b = a + 1.8
print(b, type(b), "\n")

print(f"Beachten Sie das Abschneiden der Nachkommastelle:\nUmwandlung in Ganzzahlen mit int(): {( a := int(a) ), (b := int(b) )}\n")

print(f"Umwandlung in ASCII-Zeichen mit chr(): {( a := chr(a) ), ( b := chr(b) )}\n")

print(f"Umwandlung in eine ASCII-Zahl mit ord(): {( a := ord(a) ), ( b := ord(b) )}\n")

print(f"Umwandlung in Fließkommazahlen mit float(): {( a := float(a) ), ( b := float(b) )}\n")

print(f"Umwandlung in Zeichen mit str(): {( a := str(a) ), ( b:= str(b) )}\n")

print(f"Umwandlung in Wahrheitswerte mit bool(): {bool(a), bool(b)}")

``` 

#### Weitere Zuweisungsoperatoren
In dem obenstehenden Code-Block wurde der sogenannte [Walross-Operator](https://docs.python.org/3/whatsnew/3.8.html) `:=` verwendet. Dieser erlaubt es, Zuweisungen innerhalb eines Ausdrucks (hier innerhalb der Funktion `print()`) vorzunehmen. Python kennt eine ganze Reihe weiterer Zuweisungsoperatoren (weitere Operatoren siehe [Python-Dokumentation](https://docs.python.org/3/reference/simple_stmts.html) oder übersichtlicher [hier](https://www.w3schools.com/python/python_operators.asp)).

| Operator | entspricht der Zuweisung |
|---|---|
| a += 2 | a = a + 2 |
| a -= 2 | a = a - 2 |
| a *= 2 | a = a * 2 |
| a /= 2 | a = a / 2 |
| a %= 2 | a = a % 2 |
| a //= 2 | a = a // 2 |
| a **= 2 | a = a ** 2 |

::: {.callout-tip collapse="false"}
## Lesbare Zuweisungen
Die in der Tabelle gezeigten Zuweisungsoperatoren sind für jemanden, der*die Ihren Code liest, gut zu lesen und  nachzuvollziehen, da Zuweisungen immer am Beginn einer Zeile, also ganz links, stehen.

Dagegen kann der Walross-Operator an einer beliebigen Stelle in Ihrem Code stehen. Das mag für Sie beim Schreiben ein Vorteil sein, der Lesbarkeit ist das aber abträglich. Wenn Sie den Walross-Operator verwenden, achten Sie deshalb auf die Nachvollziehbarkeit Ihres Codes.
:::

#### Benennung von Variablen
Für die Benennung von Variablen gibt es (meist) nur wenige Vorgaben. Trotzdem ist es besser, einen langen, aber ausführlichen Variablennamen zu vergeben, als einen kurzen, der sich schnell schreiben lässt. Denn Programmcode wird deutlich häufiger gelesen als geschrieben. Können Sie sich erinnern? Welcher Wert ist in der Variablen `Var_3` gespeichert, und welche Werte sind in `variable1` und `a` gespeichert? Es reicht schon, wenn Sie sich an den richtigen Datentyp erinnern können.

Falls Sie sich nicht erinnern können, dann ist dieses Beispiel gelungen: Die Namensgebung dieser Variablen ist alles andere als gut. Die Auflösung steht im folgenden Aufklapper.

::: {.callout-tip collapse="true"}
## Auflösung
```{python}
print(type(var_3), type(variable1), type(a))
```

:::

Deshalb empfiehlt es sich "sprechende", das heißt selbsterklärende, Variablennamen zu vergeben. Unter selbsterklärenden Variablennamen versteht sich, dass der Variablenname den Inhalt der Variable beschreibt. Wird bspw. in einer Variable der Studienabschluss gespeichert, so kann diese mit `academic_degree` oder `studienabschluss` bezeichnet werden. Werden Daten aus verschiedenen Jahren verarbeitet, kann das Jahr zu besseren Unterscheidbarkeit in den Variablennamen einfließen, etwa: `academic_degree_2023` oder `studienabschluss2024`. Dies verbessert die Lesbarkeit des Codes und vereinfacht die Benutzung der Variable. Mehr Informationen finden sich in [diesem Wikipedia Abschnitt](https://de.wikipedia.org/wiki/Variable_(Programmierung)#Namenswahl). 


::: {.callout-warning}
## Schlüsselwörter und Funktionsnamen

In Python reservierte Schlüsselwörter und Funktionsnamen sind ungeeignete Variablennamen. Während Python die Wertzuweisung zu Schlüsselwörtern wie `True` oder `break` mit einem Syntaxfehler quittiert, lassen sich Funktionsnamen problemslos neue Werte zuweisen, beispielsweise mit `print = 6`. Wenn Sie die Funktion print dann aufrufen, funktioniert diese natürlich nicht mehr. In diesem Fall müssen Sie die Zuweisung aus dem Skript entfernen und Python neu starten.  
:::

### Aufgaben Variablen
1. Schreiben Sie ein Skript, welches eine gegebene Zeit 𝗍 in Sekunden in die Anzahl Tage, Stunden, Minuten und Sekunden aufteilt und diese Aufteilung ausgibt.  
Berechnen Sie die Aufteilung für folgende Zeiten:

    a) 79222 s
  
    b) 90061 s
  
    c) 300000 s

2. Die Position eines Fahrzeugs zur Zeit $t$, welches konstant mit der Beschleunigung $a$ beschleunigt, ist gegeben durch:

$$
x(t) = x_0 + v_0 \cdot t + \frac{1}{2} \cdot a t^2
$$

Dabei ist $x_0$ die Anfangsposition und $v_0$ die Anfangsgeschwindigkeit. Erstellen Sie Variablen für $x_0$, $v_0$ und $a$ und weisen Sie ihnen Werte zu. Da die Variablen nur Werte, aber keine Einheiten abbilden, überlegen Sie sich die ggf. notwendigen Umrechnungen. Folgende Werte können sie als Beispiel verwenden:

$$
x_0 = 10 \, km \,\,\,v_0 = 50 \frac{km}{h} \,\,\,a = 0.1 \frac{m}{s^2}
$$

Erzeugen Sie eine Variable für den Zeitpunkt $t$, z. B.: $t = 10 \, min$.
Berechnen Sie mit obiger Gleichung und mit Hilfe der Variablen die Position $x(t)$.
Geben Sie nicht nur den Wert von $x(t)$ in Kilometer aus, sondern betten ihn in einen ganzen Antwortsatz (einschließlich Einheiten) ein.

**Die Musterlösung kann Marc machen.**

::: {#tip-lösungvariablen .callout-tip collapse="true"}
## Musterlösung Aufgaben Variablen

:::

[@Arnold-2023-datentypen-und-grundlagen]

## Ausgabe formatieren
Mit sogenannten `f-Strings` können formatierte Zeichenketten erstellt werden. Formatierte Zeichenketten werden mit einem vorgesetzten `f` vor den Anführungsstrichen erstellt. Werte und Variablen können durch Platzhalter eingesetzt werden, die mit geschweiften Klammern `{}` angegeben und mit Formattierungsinformationen versehen werden. Das Formatierungsformat innerhalb der geschweiften Klammer ist, vereinfacht dargestellt:

```
{Variablenname:PlatzbedarfAusgabetyp}
```

Ein f-String mit Platzhaltern ohne Formatierungsinformationen:
```{python}
zahl1 = 5
zahl2 = 7
verhältnis = zahl1 / zahl2
print(f"Das Verhältnis von {zahl1} zu {zahl2} ist {verhältnis}.")
```

Die Anzahl der darzustellenden Nachkommastellen kann wie folgt festgelegt werden: `{verhältnis:.2f}`.

  - `:` leitet die Formatierungsbefehle ein.

  - `.` gibt an, dass Formatierungsinformationen für die Darstellung hinter dem Dezimaltrennzeichen folgen.

  - `2` ist der Wert für die darzustellenden Nachkommastellen.

  - `f` spezifiziert die Darstellung einer Gleitkommazahl 'float'.

```{python}
print(f"Das Verhältnis von {zahl1} zu {zahl2} ist {verhältnis:.2f}.")
```

Das gleiche ist mit einem Wert möglich:
```{python}
print(f"Das Verhältnis ist genauer {0.7142857142857143:.3f}.")
```

Ein Wert für die insgesamt darzustellenden Stellen wird vor dem Dezimaltrennzeichen übergeben `{verhältnis:7.2f}` bzw. inklusive führender Nullen `{verhältnis:07.2f}`: 
```{python}
print(f"Das Verhältnis von {zahl1} zu {zahl2} ist {verhältnis:7.2f}.")
print(f"Das Verhältnis ist genauer {0.7142857142857143:07.3f}.")
```

Das Dezimaltrennzeichen zählt als eine Stelle.

Häufig verwendete Formatierung sind:

::: {.panel-tabset}
## ganze Zahlen
Ganze Zahlen haben den Ausgabetyp `d`.

| Formatierung | Ausgabe |
|---|--------|
| `nd` | n-Stellen werden für die Ausgabe verwendet |
| `0nd` | Ausgabe von n-Stellen, wobei die Leerstellen mit Nullen aufgefüllt werden. |
| `+d` | Ausgabe des Vorzeichens auch bei positiven Zahlen |

## Gleitkommazahlen
Gleitkommazahlen haben die Ausgabetypen `f` und `e`.

| Formatierung | Ausgabe |
|---|--------|
| `.mf` | m-Stellen werden für die Nachkommastellen genutzt. |
| `n.mf` | Insgesamt werden n-Stellen verwendet, wobei m-Stellen für die Nachkommastellen genutzt werden. |
| `n.me` | Genauso, aber die Ausgabe erfolgt in exponentieller Schreibweise. |

## Zeichenketten
Zeichenketten haben den Ausgabetyp `s`.

| Formatierung | Ausgabe |
|---|--------|
| `ns` | Insgesamt werden n-Stellen verwendet. |
| `<ns`, `>ns`, `^ns` | Genauso, jedoch wird die Zeichenkette linksbündig, rechtsbündig bzw. zentriert platziert. |

:::

### Aufgaben Ausgabe
1. "Gleitkommazahlen können natürlich, z. B. {1015.39:12.4f}, oder wissenschaftlich, {1015.39:e}, dargestellt werden."
 
 - Verändern Sie die natürliche Schreibwese so, dass nur noch eine Stelle nach dem Komma angezeigt wird. Was fällt auf?
 
 - Verändern Sie die wissenschaftliche Schreibweise so, dass anstelle von `e` die Zehnerbasis als `E` geschrieben wird.

2. Wandeln Sie die Zahl 1015.39 in eine Zeichenkette um und stellen Sie diese mit 12 Stellen rechtsbündig dar.

3. Geben Sie mit Hilfe der formatierten Zeichenketten eine Tabelle aus, welche die Spalten $x$, $x^2$ und $x^3$ für ganze Zahlen zwischen -2 und 2 auflistet.


**Die Musterlösung kann Marc machen.**

::: {#tip-lösungausgabe .callout-tip collapse="true"}
## Musterlösung Ausgabe
:::

[@Arnold-2023-funktionen-module-dateien]