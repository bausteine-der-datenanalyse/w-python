# Sammeltypen
Sammeltypen werden benutzt, um mehrere Werte in einer Variable zu speichern und zu verarbeiten. In Python gibt es vier Sammeltypen, die jeweils eine eigene Klasse sind:

  - [Listen](https://de.wikipedia.org/wiki/Liste_(Datenstruktur))

  - [Tupel](https://de.wikipedia.org/wiki/Tupel_%28Informatik%29)

  - [Mengen](https://de.wikipedia.org/wiki/Menge_%28Datenstruktur%29)

  - [assoziative Arrays](https://de.wikipedia.org/wiki/Zuordnungstabelle_%28Datenstruktur%29) oder Dictionary

**panel-tabset**

## Listen
Listen können eine flexible Anzahl von Elementen beliebigen Typs beinhalten. In Python enthalten Listen nicht wirklich Daten, sondern bestehen aus Zeigern auf die Speicherorte der enthaltenen Elemente. Bei der Definition einer Liste, werden die Elemente durch `[]` eingeklammert und mit Kommata `,` getrennt.

```{python}
text_variable = 'abc'

liste1 = [1, 'xy', True, text_variable]
print(liste1)

# Listen können auch Listen enthalten
liste2 = [None, liste1]
print(liste2)
```

Wie alle Typen in Python, werden Listen durch Zuweisung erstellt. Eine leere Liste kann durch Zuweisung von `[]` erstellt werden.

```{python}
leere_liste = []
print(leere_liste)
```

Wie Zeichenfolgen können Listen durch den Operator '+' verkettet werden.

```{python}
verkettete_liste = liste1 + liste2
print(verkettete_liste)
```

## Slicing: der Zugriffsoperator []
Der Zugriff auf einzelne oder mehrere Elemente einer Liste (und anderen Sammeltypen) erfolgt über den Zugriffsoperator []. Ein Ausschnitt aus einem Objekt wird Slice genannt, der Operator heißt deshalb auch Slice Operator.

### Zugriff auf einzelne Elemente
Elemente über ihren Index, bei 0 beginnend angesprochen.

```{python}
print(liste1)
print(liste1[0])
print(liste1[3])
```

Auf verschachtelte Listen kann mit zwei aufeinanderfolgenden Zugriffsoperatoren zugegriffen werden. Die Liste `liste2` enthält an Indexposition 1 eine Liste mit 4 Elementen.

```{python}
print(liste2)
print(liste2[1])
print(liste2[1][0], liste2[1][1], liste2[1][2], liste2[1][3])

```

Mit negativen Indizes können Elemente vom Ende aus angesprochen werden. So entspricht z. B. die -1 dem letzten Element.

```{python}
print(liste1)
print(liste1[-1], liste1[-3])
```

### Zugriff auf mehrere Elemente
Indexbereiche können in der Form `[start:stop:step]` angesprochen werden. `start` ist das erste adressierte Element, `stop` **das erste nicht mehr adressierte Element** und `step` die Schrittweite.

von `start` bis **nicht einschließlich** `stop` mit der Schrittweite `step`.

Schöne Zusammenstellung der Parameter

https://stackoverflow.com/questions/509211/how-slicing-in-python-works
Direktlink: https://stackoverflow.com/a/509295
a[start:stop]  # items start through stop-1
a[start:]      # items start through the rest of the array
a[:stop]       # items from the beginning through stop-1
a[:]           # a copy of the whole array
There is also the step value, which can be used with any of the above:
a[start:stop:step] # start through not past stop, by step
The key point to remember is that the :stop value represents the first value that is not in the selected slice. So, the difference between stop and start is the number of elements selected (if step is 1, the default).
The other feature is that start or stop may be a negative number, which means it counts from the end of the array instead of the beginning. So:
a[-1]    # last item in the array
a[-2:]   # last two items in the array
a[:-2]   # everything except the last two items
Similarly, step may be a negative number:
a[::-1]    # all items in the array, reversed
a[1::-1]   # the first two items, reversed
a[:-3:-1]  # the last two items, reversed
a[-3::-1]  # everything except the last two items, reversed




## Tupel
wie Simone... Listen sehr ähnlich... weil zu Listen muss man so viel sagen.

## Zugriff auf Sammeltypen

### Slicing-Operator []

[:] legt eine Kopie an

### 

Sammeltypen & for-Schleifen --> es handelt sich um eine foreach-Schleife, die ohne Zähler auskommt und die Liste, das Tupel, die Menge oder das Dictionary (Ausgabe der keys)



## Unterschied zu Sequenzen
https://docs.python.org/3/library/stdtypes.html#typesseq
Sequence Types — list, tuple, range

Hinweis: Strings sind in Python eine Sequenz von Zeichen (Zeichenfolge), die unveränderlich ist (immutable). Bei der Arbeit mit strings fällt das nicht unbedingt auf. **Beispiel ergänzen, bei dem ein string verändert wird.** Tatsächlich wird aber immer ein neuer string angelegt.
  
## Slicing
Um auf Elemente einer Zeichenfolge zuzugreifen, wird der Slicing-Operator `[]` verwendet. 

## Mapping Types
https://docs.python.org/3/library/stdtypes.html#mapping-types-dict

# Aufgabe Listen und Sammeltypen
1. Bubble Sort - dafür braucht man Listen und Slicing 

(@Arnold-2023-schleifen-abzweigungen)