# Dateien lesen und schreiben
Maya und Hans haben je sechs Mal einen Würfel geworfen und ihre Wurfergebnisse in einer .txt-Datei protokolliert. Wir wollen mit die Dateien mit Python auswerten, um zu bestimmen, wer von beiden in Summe die höchste Augenzahl erreicht hat.

| Daten | Dateiname |
|---|------|
| Würfelergebnisse Maya | dice-maya.txt |
| Würfelergebnisse Hans | dice-hans.txt|

&nbsp;

## Dateiobjekte
Um mit Python auf eine Datei zuzugreifen, muss diese fürs Lesen oder Schreiben geöffnet werden. Dazu wird in Python die Funktion [open](https://docs.python.org/3/library/functions.html#open) verwendet. Diese nimmt zwei Argumente, den Pfad der Datei und den Zugriffsmodus, an und liefert ein [Dateiobjekt](https://docs.python.org/3/glossary.html#term-file-object) zurück. Aus dem Dateiobjekt werden dann die Inhalte der Datei ausgelesen.

### Dateipfad
Der lokale Dateipfad wird ausgehend vom aktuellen Arbeitsverzeichnis angegeben.

``` {python}

pfad_maya = "skript/01-daten/dice-maya.txt"
pfad_hans = "skript/01-daten/dice-hans.txt"

```

:::: {#tip-wd-Python .callout-tip collapse="true"}
## Arbeitsverzeichnis in Python ermitteln und wechseln
Der Pfad des aktuellen Arbeitsverzeichnisses kann mit dem Modul os mittels `os.getcwd()` ermittelt werden (hier ohne Ausgabe). Mit `os.chdir('neuer_pfad')` kann das Arbeitsverzeichnis ggf. gewechselt werden. Die korrekte Formatierung des Pfads erkennen Sie an der Ausgabe von `os.getcwd()`.

``` {python}
#| output: false

import os
print(os.getcwd())
```

Das Importieren von Modulen wird in einem späteren Kapitel behandelt.
::::

### Zugriffsmodus
Als Zugriffsmodus stehen unter anderem folgende Optionen zur Verfügung:

| Modus | Beschreibung |
| --- | ----------- |
| `r` | lesender Zugriff |
| `w` | Schreibzugriff, Datei wird überschrieben |
| `x` | Erzeugt die Datei, Fehlermeldung, wenn die Datei bereits existiert |
| `a` | Schreibzugriff, Inhalte werden angehängt |
| `b` | Binärmodus (z. B. für Grafiken) |
| `t` | Textmodus, default|

&nbsp;

Die Zugriffsmodi können auch kombiniert werden. Weitere Informationen dazu finden Sie in der [Dokumentation](https://docs.python.org/3/library/functions.html#open). Sofern nicht im Binärmodus auf Dateien zugegriffen wird, liefert die Funktion `open()` den Dateiinhalt als string zurück. 

Im Lesemodus wird ein Datenobjekt erzeugt. 

``` {python}

daten_maya = open(pfad_maya, mode = 'r')
print(daten_maya)
```

Wenn das Datenobjekt `daten_maya` der Funktion `print()` übergeben wird, gibt Python die Klasse des Objekts zurück, in diesem Fall also _io.TextIOWrapper. Diese Klasse stammt aus dem Modul io und ist für das Lesen und Schreiben von Textdateien zuständig. Ebenfalls werden als Attribute des Dateiobjekts der Dateipfad, der Zugriffsmodus und die Enkodierung der Datei ausgegeben (siehe @nte-attribute). Sollte die Enkodierung nicht automatisch als UTF-8 erkannt werden, kann diese mit dem Argument `encoding = 'UTF-8'` übergeben werden. 

``` {python}

daten_maya = open(pfad_maya, mode = 'r', encoding = 'UTF-8')
print(daten_maya)
```

::: {#nte-attribute .callout-note collapse="true"}
## Attribute eines Objekts bestimmen

 Mit der Funktion `dir(objekt)` können die verfügbaren Attribute eines Objekts ausgegeben werden. Dabei werden jedoch auch die vererbten Attribute und Methoden der Klasse des Objekts ausgegeben, sodass die Ausgabe oft sehr umfangreich ist. Zum Beispiel für die Ganzzahl 1:

```{python}
print(dir(1))

```

Um die Ausgabe auf Attribute einzugrenzen, kann folgende Funktion verwendet werden:

```{python}
objekt = 1

attribute = [attr for attr in dir(objekt) if not callable (getattr(objekt, attr))]
print(attribute)
```

Mit doppelten Unterstrichen umschlossene Attribute sind für Python reserviert und nicht für den:die Nutzer:in gedacht. Folgende Funktion entfernt Attribute mit doppelten Unterstrichen aus der Ausgabe:

```{python}
objekt = 1

attribute = [attr for attr in dir(objekt) if not (callable(getattr(objekt, attr)) or attr.startswith('__'))]
print(attribute)
```

Im Fall einer Ganzzahl können Attribute (zur Abgrenzung von Gleitkommazahlen in umschließenden Klammern) wie folgt aufgerufen werden:

```{python}
(1).numerator
```

Wenn wir uns die Attribute des Dateiobjekts 'daten_maya' ansehen, fallen Attribute mit einem einzelnen führenden Unterstrich auf.

```{python}
objekt = daten_maya

attribute = [attr for attr in dir(objekt) if not (callable(getattr(objekt, attr)) or attr.startswith('__'))]
print(attribute)
```

Hierbei handelt es sich um Attribute, die nicht durch den:die Nutzer:in aufgerufen werden sollen (weitere Informationen dazu finden Sie [hier](https://dbader.org/blog/meaning-of-underscores-in-python)). Folgender Programmcode gibt alle Attribute ohne führende Unterstriche aus:

```{python}
objekt = daten_maya

attribute = [attr for attr in dir(objekt) if not (callable(getattr(objekt, attr)) or attr.startswith('_'))]
print(attribute)
```

:::

Die Attribute der Datei können mit entsprechenden Befehlen abgerufen werden.

``` {python}

print(f"Dateipfad: {daten_maya.name}\n"
      f"Dateiname: {os.path.basename(daten_maya.name)}\n"
      f"Datei ist geschlossen: {daten_maya.closed}\n"
      f"Zugriffsmodus: {daten_maya.mode}"
      f"Enkodierung: : {daten_maya.encoding}")


```

::: {#tip-enkodierung .callout-tip collapse="false"}
## Enkodierung ausgeben

In der Datenanalyse werden in der Regel spezialisierte Pakete wie NumPy oder Pandas verwendet. Diese vereinfachen das Einlesen von Dateien gegenüber der Pythonbasis erheblich. Dennoch ist es sinnvoll, sich mit den Methoden der Pythonbasis zum Einlesen von Dateien vertraut zu machen:

  a) Klappt das Einlesen mit der Funktion `open()` so gut wie immer - es ist eine gute Rückfalloption.

  b) Ist die Funktion `open()` eine schnelle Methode, die Enkodierung einer Datei zu bestimmen. Beim Einlesen von Dateien mit NumPy und Pandas muss die Enkodierung für eine korrekte Zeichenverarbeitung häufig mit dem Parameter `encoding` übergeben werden.

:::

### Dateiinhalt ausgeben {#sec-dateiinhalt}
Um den Dateiinhalt auszugeben, kann das Datenobjekt mit einer Schleife zeilenweise durchlaufen und ausgegeben werden. (Die Datei dice-maya hat nur eine Zeile.) 

``` {python}

i = 0
for zeile in daten_maya:
    print(f"Inhalt Zeile {i}, mit {len(zeile)} Zeichen:")
    print(zeile)
    i += 1

```

Dies ist jedoch für größere Dateien nicht sonderlich praktikabel. Die Ausgabe einzelner Zeilen mit der Funktion `print()` kann aber nützlich sein, um die genaue Formatierung der Zeichenkette zu prüfen. In diesem Fall hat Maya ihre Daten in Anführungszeichen gesetzt und mit einem Komma voneinander getrennt.

## Dateien einlesen
Um den gesamten Inhalt einer Datei einzulesen, kann die Methode [datenobjekt.read()](https://docs.python.org/3/tutorial/inputoutput.html) verwendet werden. Die Methode hat als optionales Argument `.read(size)`. size wird als Ganzzahl übergeben und entsprechend viele Zeichen (im Binärmodus entsprechend viele Bytes) werden ggf. bis zum Dateiende ausgelesen.

``` {python}

augen_maya = daten_maya.read()

print(f"len(augen_maya): {len(augen_maya)}\n\n"
      f"Inhalt der Datei augen_maya:\n{augen_maya}")

```

Das hat offensichtlich nicht geklappt, der ausgelesene Dateiinhalt ist leer! Der Grund dafür ist, dass beim Lesen (und beim Schreiben) einer Datei der Dateizeiger die Datei durchläuft. Nachdem die Datei daten_maya in @sec-dateiinhalt zeilenweise ausgegeben wurde, steht der Dateizeiger am Ende der Datei.

:::: {#wrn-Dateizeiger .callout-warning appearance="simple"}
## Dateizeiger in Python

Wird eine Datei zeilenweise oder mit der Methode `.read()` ausgelesen, wird der Dateizeiger um die angegebene Zeichenzahl bzw. bis ans Ende der Datei bewegt. Wird beispielsweise ein Datensatz 'daten' geöffnet und mit der Methode `daten.read(3)` die ersten drei Zeichen ausgelesen, bewegt sich der Dateizeiger von der Indexposition 0 zur Indexposition 3 (bzw. steht jeweils davor).

::::: {#fig-Dateizeiger layout-ncol=2}

![](skript/00-bilder/indexposition-0.png){fig-alt="Dargestellt ist ein in fünf Blöcke unterteilter Streifen, der einen eindimensionalen Datensatz repräsentiert. Die Blöcke sind entlang der 0. Achse von links nach rechts mit 0 bis 4 beschriftet. Oberhalb steht links vom Block Null ein Pfeil mit der Beschriftung Indexposition Null"}

![](skript/00-bilder/indexposition-3.png){fig-alt="Dargestellt ist der gleiche Streifen. Oberhalb steht links vom Block drei ein Pfeil mit der Beschriftung Indexposition drei"}

Bewegung des Dateizeigers beim Auslesen von drei Zeichen
:::::

Die Methode `daten.tell()` gibt zurück, an welcher Position sich der Dateizeiger befindet.

Mit der Methode `daten.seek(offset, whence = 0)` wird der Zeiger an eine bestimmte Position gesetzt. Die Methode akzeptiert das Argument offset (Versatz) und das optionale Argument whence (woher), dessen Standardwert 0 (Dateianfang) ist. Für Zugriffe **im Binärmodus** (`open(pfad, mode = 'rb')`) kann das Argument whence außerdem die Werte 1 (aktuelle Position) oder 2 (Dateiende) annehmen.

  * `daten.seek(0, 0)` bezeichnet den Dateianfang

  * `daten.seek(0, 1)` bezeichnet die aktuelle Position in der Datei

  * `daten.seek(0, 2)` bezeichnet das Dateiende

  * `daten.seek(-3, 2)` bezeichnet das dritte Zeichen vor dem Dateiende

::::

Wird der Dateizeiger mit der Methode `datenobjekt.seek(0)` an den Dateianfang gestellt, gelingt das Auslesen der Datei.

``` {python}
#| results: hold

print(f"Position des Dateizeigers vor dem Zurücksetzen auf 0: {daten_maya.tell()}")

daten_maya.seek(0);
print(f"Position des Dateizeigers nach dem Zurücksetzen auf 0: {daten_maya.tell()}")

augen_maya = daten_maya.read()

print(f"Inhalt des Objekts augen_maya:\n{augen_maya}")
```

**Geben Sie aus dem Datenobjekt daten_maya mit den Methoden .seek() und .read() die Zahlen and zweiter und dritter Stelle, also 6 und 2, aus.**

:::: {#tip-Musterlösung-Zeigerposition .callout-tip collapse="true"}
## Musterlösung Dateizeiger bewegen

``` {python}

daten_maya.seek(6, 0);
print(daten_maya.read(1))

daten_maya.seek(daten_maya.tell() + 4, 0);
print(daten_maya.read(1))
```

::::

Um Mayas Würfelergebnisse zu addieren, müssen die Zahlen extrahiert und in Ganzzahlen umgewandelt werden, da im Textmodus stets strings zurückgegeben werden.

``` {python}

print(type(augen_maya))
```

Dazu werden mit der Methode `str.strip(")` das führende und abschließende Anführungszeichen entfernt sowie anschließend mit der Methode `str.split('", "')` der String in eine Liste aufgeteilt. Anschließend werden die Listenelemente in Ganzzahlen umgewandelt und summiert. (Methoden der string-Bearbeitung werden im nächsten Abschnitt ausführlich behandelt.)

``` {python}
#| results: hold

print(f"augen_maya:\n{augen_maya}")

augen_maya = augen_maya.strip('"')
print(f"\naugen_maya.strip('\"'):\n{augen_maya}")

augen_maya = augen_maya.split('", "')
print(f"\naugen_maya.split('\", \"'):\n{augen_maya}")

augen_maya_int = []
for i in augen_maya:
  augen_maya_int.append(int(i))

print(f"\naugen_maya_int:\n{augen_maya_int}\n\nSumme Augen: {sum(augen_maya_int)}")
```

#### Datei schließen

Nach dem Zugriff auf die Datei, muss diese wieder geschlossen werden, um diese für andere Programme freizugeben.
``` {python}

daten_maya.close()
```

:::: {#wrn-Schreiboperationen .callout-warning appearance="simple"}
# Schreiboperationen mit Python

Das Schließen einer Datei ist besonders für Schreiboperationen auf Datenobjekten wichtig. Andernfalls kann es passieren, dass Inhalte mit `datenobjekt.write()` nicht vollständig auf den Datenträger geschrieben werden. Siehe dazu die [Dokumentation](https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files).

::::

## Aufgabe Dateien einlesen

**Welche Augenzahl hat Hans erreicht?**

:::: {#tip-Musterlösung-Augenzahlvergleich .callout-tip collapse="true"}
## Musterlösung Augenzahlvergleich

::::: {.border}

``` {python}
# Erst Einlesen der Datei:
daten_hans = open(pfad_hans, mode = 'r', encoding = 'UTF-8')
augen_hans = daten_hans.read()
print(augen_hans)
# Hier muss man erkennen, dass Hans seinen Namen an den Anfang seiner Liste gesetzt hat. Dieser String muss also entfernt werden, bevor die Summe gebildet werden kann!

augen_hans = augen_hans.strip('"Hans", ')
augen_hans = augen_hans.strip('"')
augen_hans = augen_hans.split('", "')
print(augen_hans)
# print-Ausgabe zeigt, dass die Liste nun korrekt bereinigt wurde. Sie besteht nur noch aus Integerwerten und diese können summiert werden

# Neue (leere) Liste für die Würfe von Hans anlegen:
augen_hans_int = []
for i in augen_hans:
   augen_hans_int.append(int(i))

print(f"Summe Augenzahl von Hans: {sum(augen_hans_int)}")
```

Musterlösung von Marc Sönnecken.
:::::
::::

[@Arnold-2023-funktionen-module-dateien]

## Datensätze einlesen
Datensätze liegen typischerweise wenigstens in zweidimensionaler Form vor, d. h. die Daten sind in Zeilen und Spalten organisiert. Außerdem weisen Datensätze in der Regel auch unterschiedliche Datentypen auf. Die Funktion `open(datei)` gibt ein Dateiobjekt zurück, das mit Methoden wie zum Beispiel `dateiobjekt.read()` als Zeichenfolge eingelesen wird. Um die Daten sinnvoll weiterverarbeiten zu können, ist es deshablb notwendig, die Zeichenfolge korrekt zu interpretieren und Daten von Trennzeichen zu unterscheiden.

Für die Bearbeitung von Zeichenfolgen bietet Python eine Reihe von [String-Methoden](https://docs.python.org/3/library/stdtypes.html#string-methods). Einige davon werden in diesem Kapitel exemplarisch verwendet. String-Methoden werden in der Regel mit einem führenden 'str' in der Form `str.methode()` genannt.

Beispielsweise soll eine Datei mit den Einwohnerzahlen der europäischen Länder eingelesen werden. 

| Daten | Dateiname |
|---|------|
| Einwohner Europas | einwohner_europa_2019.csv |

&nbsp;

Zunächst geben wir die ersten drei Zeilen der Datei aus. Dafür kann die Datei zeilenweise mit einer for-Schleife durchlaufen werden, die mit dem Schlüsselwort `break` abgebrochen wird, wenn die Laufvariable den Wert 3 erreicht hat. Eine andere Möglichkeit ist die Methode `dateiobjekt.readline()`, die eine einzelne Zeile ausliest.

::: {.panel-tabset}

## for-Schleife mit break

```{python}
dateipfad = "skript/01-daten/einwohner_europa_2019.csv"
dateiobjekt_einwohner = open(dateipfad, 'r')

# erste 3 Zeilen anschauen
i = 0
for zeile in dateiobjekt_einwohner:
  
  print(zeile)
  i += 1
  if i == 3:
    break

# Datei schließen
dateiobjekt_einwohner.close()
```

## Methode dateiobjekt.readline()

Mit der Methode `dateiobjekt.readline()` kann eine einzelne Zeile eingelesen werden.

```{python}
dateipfad = "skript/01-daten/einwohner_europa_2019.csv"
dateiobjekt_einwohner = open(dateipfad, 'r')

for i in range(3):
  print(dateiobjekt_einwohner.readline())

# Datei schließen
dateiobjekt_einwohner.close()
```

:::

Die Datei hat also zwei Spalten. In der ersten Spalte sind die Ländernamen eingetragen, in der zweiten Spalte die Werte. Als Trennzeichen wird das Komma verwendet. In der ersten Zeile sind die Spaltenbeschriftungen eingetragen.

### vollständiges Einlesen
Im vorherigen Abschnitt haben wir die Methode `dateiobjekt.read()` kennengelernt, mit der eine Datei vollständig als string eingelesen wird. 
Zunächst wird die Datei mit der Methode `dateiobjekt.read()` in das Objekt einwohner eingelesen und wieder geschlossen.

```{python}
dateipfad = "skript/01-daten/einwohner_europa_2019.csv"
dateiobjekt_einwohner = open(dateipfad, 'r')

einwohner = dateiobjekt_einwohner.read()
print(einwohner)

# Datei schließen
dateiobjekt_einwohner.close();
```

Anschließend können die eingelesenen Daten mit der Methode `str.split('\n')` zeilweise aufgeteilt werden. Mit `'\n'` wird als Argument der Zeilenumbruch übergeben. Die Methode liefert eine Liste zurück.

```{python}
liste_einwohner_zeilenweise = einwohner.split("\n")
print(liste_einwohner_zeilenweise[0:3])
```

Die Liste enthält an der Indexposition die Spaltenbeschriftungen. Diese können mit der Methode `liste.pop(index)` aus der Liste entfernt und zugleich in einem neuen Objekt gespeichert werden.

```{python}
spaltennamen = liste_einwohner_zeilenweise.pop(0)
spaltennamen = spaltennamen.split(',')
print(f"Überschrift Spalte 0: {spaltennamen[0]}\tÜberschrift Spalte 1: {spaltennamen[1]}")
```

Anschließend kann die Liste mit der Methode `str.split(',')` nach Ländern und Werten aufgeteilt werden. Der Vorgang bricht allerdings mit einer Fehlermeldung ab. Die Fehlermeldung wird im folgenden Code-Block per error handling mit der Konstruktion aus `try:` und `except:` abgefangen, um dieser hier im Skript darzustellen.

**error handling ergänzen - bei Funktionen - und hier Querverweis setzen**
**Die Datei von der Frau Vol.. war ein gutes Beispiel, wo Zeile 127 plötzlich eingerückt war.**

```{python}
# Leere Listen vor der Schleife anlegen
geo = []
einwohnerzahl = []

try:
  for zeile in liste_einwohner_zeilenweise:
    eintrag = zeile.split(',')
    geo.append(eintrag[0])
    einwohnerzahl.append(eintrag[1])

  print(spaltennamen[0])
  print(geo, "\n")

  print(spaltennamen[1])
  print(einwohnerzahl)

except IndexError as error:
  print(error)
```

Die Fehlermeldung ist so zu deuten, dass eine der Listenoperationen mit dem Slice Operator einen ungültigen Index anspricht. Leicht angepasst, liefert der Code-Block auch die Ursache der Fehlermeldung. 

```{python}
# Leere Listen vor der Schleife anlegen
geo = []
einwohnerzahl = []
indexzähler = 0

for zeile in liste_einwohner_zeilenweise:
  try:
    eintrag = zeile.split(',')
    geo.append(eintrag[0])
    einwohnerzahl.append(eintrag[1])
    indexzähler += 1

  except IndexError as error:
    print(error)
    print("Eintrag:", eintrag, "\tIndexposition:", indexzähler)

```

Wird die leere Zeile aus der Liste entfernt, klappt das Aufteilen der Ländernamen und der Werte.

```{python}
# leere Zeile entfernen
liste_einwohner_zeilenweise.remove('')

# Leere Listen vor der Schleife anlegen
geo = []
einwohnerzahl = []

try:
  for zeile in liste_einwohner_zeilenweise:
    eintrag = zeile.split(',')
    geo.append(eintrag[0])
    einwohnerzahl.append(eintrag[1])

  print(spaltennamen[0])
  print(geo, "\n")

  print(spaltennamen[1])
  print(einwohnerzahl)

except IndexError as error:
  print(error)
```

### Aufgabe Einwohnerzahl
1. Bestimmen Sie das Minimum und das Maximum der Einwohnerzahl und die dazugehörigen Länder.

2. Bereinigen Sie ggf. fehlerhafte Werte. 

3. Wie viele Einwohner leben in Europa insgesamt?

  - Welchen Datentyp hat die Liste einwohnerzahl?
  
  - Welchen Datentyp haben die Einträge der Liste einwohnerzahl?

**Die Musterlösung kann Marc machen**

::: {.callout-tip collapse="true"}
## Musterlösung vollständiges Einlesen

:::

## .readlines() und list()
Die Methode `dateiobjekt.readlines()` gibt eine Liste zurück, in der jede Zeile einen Eintrag darstellt. Ebenso kann die Listenfunktion `list()` auf Dateiobjekte angewendet werden. Beide Vorgehensweisen liefern die gleiche Liste zurück, in der der Zeilenumbruch `\n`  mit ausgelesen wird.

```{python}
dateipfad = "skript/01-daten/einwohner_europa_2019.csv"
dateiobjekt_einwohner = open(dateipfad, 'r')

# Methode readlines
einwohner = dateiobjekt_einwohner.readlines()
print(einwohner)

## Dateizeiger zurücksetzen
dateiobjekt_einwohner.seek(0);

# Funktion list
einwohner = list(dateiobjekt_einwohner)
print(einwohner)

# Datei schließen
dateiobjekt_einwohner.close();
```

Um den Zeilenumbruch zu entfernen, könnte mit dem Slice Operator das letzte Zeichen jedes Listeneintrags entfernt werden. Eine andere Möglichkeit ist die Methode `str.replace(old, new, count=-1)`, mit der Zeichen ersetzt oder gelöscht werden können. Die Parameter `old` und `new` geben die zu ersetzende bzw. die einzusetzende Zeichenfolge an und müssen positional übergeben werden. Über den Parameter `count` kann eingestellt werden, wie oft die Zeichenfolge `old` ersetzt werden soll, standmäßig wird jedes Vorkommen ersetzt.

```{python}
print('Hund'.replace('Hu', 'Mu'))

zeichenfolge = 'Ein  kurzer Text ohne  doppelte Leerzeichen.'

print(zeichenfolge.replace('  ', ' '))
```

Die Methode `str.replace()` kann auch zum Löschen verwendet werden. Wird für den Parameter `new` eine leere Zeichenfolge übergeben, wird die in `old` übergebene Zeichenfolge gelöscht.

```{python}
print(zeichenfolge.replace(' ', ''))
```

**Rest aus SA: 03**


Von unschätzbaren Wert beim Einlesen von Datensätzen (Querverweis auf m-EsD)
str.replace(old, new, count=-1) # wird new als '' übergeben, entspricht die Funktion dem Löschen von Zeichenfolgen

str.split(), str.rsplit(), str.splitlines(keepends=False)


nicht von mir verwendet, aber nützlich:  
str.count(sub[, start[, end]])
str.find(sub[, start[, end]]) # return the lowest index in the string where substring sub is foun
str.index(sub[, start[, end]]) # Like find(), but raise ValueError when the substring is not found.
str.rfind(sub[, start[, end]]) # return the highest index in the string where substring sub is foun
str.rindex(sub[, start[, end]]) # Like find(), but raise ValueError when the substring is not found.

str.join(iterable) # das nutze ich einmal im m-EsD (glaube ich)

str.lstrip([chars]), str.rstrip([chars]), str.strip([chars]) --> default ist whitespace

## Aufgaben string methods


## Dateien schreiben

&nbsp;
(@Arnold-2023-funktionen-module-dateien)