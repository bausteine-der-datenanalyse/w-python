# Einleitung: Datenanalyse mit Python

<div style="position: relative; width: 100%; aspect-ratio: 16 / 9;">
  <iframe src="https://av.tib.eu/player/71644" allowfullscreen style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;"></iframe>
</div>

Die Erzeugung und Auswertung von Daten ist ein zentraler Bestandteil wissenschaftlicher Forschung. Die computergestützte Datenanalyse ermöglicht es, große Datenmengen (teil-)automatisiert auszuwerten. Gut lesbare Skriptsprachen wie Python sorgen für eine nachvollziehbare Datenverarbeitung und ermöglichen es, Analysen "auf Knopfdruck" zu wiederholen oder anzupassen.

::: {.border}
![Logo der Programmiersprache Python](00-bilder/python-logo-and-wordmark-cc0-tm.png)

Python Logo von Python Software Foundation steht unter der [GPLv3](https://www.gnu.org/licenses/gpl-3.0.html). Die Wort-Bild-Marke ist markenrechtlich geschützt: <https://www.python.org/psf/trademarks/>. Das Werk ist abrufbar auf [wikimedia](https://de.m.wikipedia.org/wiki/Datei:Python_logo_and_wordmark.svg). 2008

::: 

&nbsp;

Python kommt als schlichte Konsole daher. Python-Code wird in die Konsole eingegeben oder in einer reinen Textdatei, dem Skript, gespeichert. Der Programmcode wird von einem sogenannten Interpreter ausgeführt. Der Interpreter übersetzt die Programmanweisungen des Skripts in Maschinencode für das jeweilige Computersystem. Dadurch kann das Skript auf verschiedenen Computersystemen ausgeführt werden. Moderne Python-Interpreter sind nicht auf durch ASCII darstellbare Zeichen limitiert und können auch mit Zeichen aus dem Format [UTF-8](https://de.wikipedia.org/wiki/UTF-8) umgehen, das das ASCII-Format z. B. um deutsche Sonderzeichen erweitert.

Zahlreiche Funktionen wie Codeformatierung, Codevervollständigung und Fehleranalyse werden durch eine sogenannte integrierte Entwicklungsumgebung (Integrated Development Environment, IDE) bereitgestellt.

``` {python}
#| echo: false
#| fig-cap: Programmentwicklung mit Python
#| fig-alt: "Flussdiagramm der Programmentwicklung mit Python. In der Entwicklungsumgebung wird ein Skript geschrieben, in der Konsole können Eingaben getätigt werden. Der Python Interpreter verarbeitet diese in Maschinencode, den der ausführende Computer in ein Ergebnis verarbeitet und Ausgibt."

# install package if necessary
# import subprocess
# subprocess.call(['pip', 'install', 'schemdraw'])
import schemdraw

from schemdraw.flow import *

with schemdraw.Drawing() as d:
    # Hauptpfad Entwicklungsumgebung
    with d.container().label('Integrierte Entwicklungsumgebung IDE'):
        d+= Box().label('Texteditor').at((0, 0))
        d+= Arrow().length(2).right().label("Skript").at((4, 0))
        d+= (interpreter := Box().label('Python\nInterpreter')).at((5, 0))
    d+= Arrow().length(5).right().label("Maschinencode", ofst = (0.7 , 0))
    d+= Box().label('ausführender\nComputer')
    d+= Arrow().length(2.5).right().label("Ergebnis")
    d+= Box().label('Ausgabe')

    # Nebenpfad Konsole
    d+= (konsole := Box().label('Konsole')).at((0, -3))
    d+= Wire("-|", arrow = "->").at(konsole.E).label('Eingaben', loc = "bottom").to(interpreter.S) # .S + .E (oder andere Richtungsangaben) müssen gesetzt werden, -| definiert eine zunächst horizontale, rechtwinkelige Kante

    d.draw()
```

## Grundbegriffe der objektorientierten Programmierung
Python ist eine objektorientierte Programmiersprache. Die objektorientierte Programmierung ist ein System, um Ordnung in komplexe Computerprogramme zu bringen. In diesem Abschnitt werden die Grundbegriffe der objektorientierten Programmierung mit Python vermittelt. Sie erfahren, was der Unterschied zwischen einem Objekt, einer Klasse und dem Datentyp ist.

### Klassen, Typen, Objekte, Attribute
Ein Pythonprogramm besteht aus verschiedenen Elementen: Operatoren und Operanden, Funktionen und Methoden, Werten und Variablen und vielem mehr. Alles in Python ist ein Objekt.

Jedes Objekt gehört zu einer Klasse, beispielsweise zur Klasse der Ganzzahlen. Die Klasse bestimmt als Blaupause die *Eigenschaften* und das *Verhalten* des Objekts - etwa welche Daten gespeichert und welche Operationen ausgeführt werden können. Ein kurzes Beispiel: Abhängig von ihrer Klasse, verhalten sich Objekte anders mit dem Operator `+`.

```{python}
print(type(2), 2 + 2, "Ganzzahlen werden addiert.")
print(type('a' and '2'), 'a' + '2', "Zeichen werden verkettet.")
print(type(True), True + True, "Wahrheitswerte werden addiert.")
```

Das liegt daran, dass das Verhalten des Operators `+` für die Klassen Ganzzahlen ('int'), Zeichenfolgen ('str') und Boolesche Werte ('bool') definiert ist. 
Anders verhält es sich mit `None`, einer Klasse, mit der nicht existente Werte verarbeitet werden:

```{python}
#| eval: false

print(None + None)
```

```{python}
#| echo: false

try:
  None + None
except TypeError as error:
  print(error)
```

Python kennt sehr viele Klassen. In Python werden Klassen (class) auch Typen (type) genannt. In früheren Versionen von Python waren Klassen und Typen noch verschieden. Inzwischen gibt es diesen Unterschied nicht mehr, beide Begriffe kommen aber noch in der Sprache vor.

::: {.border}
![Datentypen in Python](00-bilder/python3-standard-type-hierarchy.png){width="60%" fig-alt="Dargestellt ist eine Kategorisierung der Standardtypen in Python. Die Kategorisierung ist nicht vollständig deckungsgleich zu den in der Dokumentation genannten Kategorien von Datentypen. Der Typ None für Nullwerte hat keine weitere Unterteilung. Die Kategorie Numbers unterteilt sich in Zahlenwerte (Ganzzahlen, boolsche Wahrheitswerte), reele Zahlen (floats) und komplexe Zahlen. Die Kategorie Sequences unterteilt sich in Unveränderliche (Strings, Tuple, Bytes) und Veränderliche (Listen, Byte Arrays). Die Kategorie Set Types unterteilt sich in Sets (Mengen) und Frozen Sets. Die Kategorie Mappings enthält Dictionaries (Wörterbücher). Die Kategorie Callable umfasst Funktionen, Methoden und Klassen. Außerdem gibt es die Kategorie Module."}

Python 3. The standard type hierarchy. von Максим Пе ist lizensiert unter [CC BY SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/deed.de) und abrufbar auf [wikimedia](https://commons.wikimedia.org/wiki/File:Python_3._The_standard_type_hierarchy.png). 2018
:::

&nbsp;

Zu welcher Klasse bzw. zu welchem Typ ein Objekt gehört, kann mit der Funktion `type()` ermittelt werden.

```{python}
print(type(print))
```

Attribute speichern Eigenschaften eines Objekts. Sie treten in der Form `objekt.attribut` auf und werden ohne nachfolgende Klammern aufgerufen. Attribute haben an dieser Stelle der Einführung keine praktische Bedeutung, werden uns aber später wieder begegnen. Eine zweite Form der Attribute ist die Methode. Methoden sind Funktionen, die zu einer bestimmten Klasse gehören. Methoden haben die Form `objekt.methode()`, werden also mit nachfolgenden Klammern aufgerufen. Die Benutzung von Funktionen und Methoden lernen wir in den kommenden Kapiteln kennen. Wie Sie die verfügbaren Attribute und Methoden eines Objekts bestimmen, erfahren Sie in @nte-attribute und @nte-methods.

## Programmcode formatieren
Bei der Formatierung von Python-Code müssen nur wenige Punkte beachtet werden. Um mit Python eine Ausgabe zu erzeugen, wird die Funktion `print(eingabe)` verwendet.  Diese Funktion gibt das Argument eingabe aus.

1. Zahlen und Operatoren können direkt eingegeben werden. Text, genauer eine Zeichenfolge, muss in einfache oder doppelte Anführungszeichen gesetzt werden, andernfalls interpretiert Python diesen als Namen eines Objekts. Zeichenfolgen können neben Buchstaben, Sonderzeichen und Zahlen enthalten.

```{python}
print(1 + 2)
print('123: Hallo Welt!')
text_variable = 'Hallo Python!'
print(text_variable)
```

2. Kommentare werden mit einer vorangestellten Raute `#` gekennzeichnet. Kommentare markieren Code, der nicht ausgeführt werden soll, oder Erläuterungen.

```{python}
# Ein reiner Kommentar
# print("Python ist großartig!") # auskommentierter Code, gefolgt von einem Kommentar
print("Python ist ziemlich gut.") # auszuführender Code, gefolgt von einem Kommentar
```

3. Ausdrücke müssen in einer Zeile stehen. Längere Ausdrücke können mit dem Backslash `\` über mehrere Zeilen fortgesetzt werden (hinter `\` darf keine `#` stehen). Innerhalb von Funktionen wie zum Beispiel `print()` können Zeilen nach jedem Komma fortgesetzt werden.

``` {python}
variable1 = 15
variable2 = 25

# Zeilenfortsetzung mit \
summe = variable1 + \
    variable2

# Zeilenfortsetzung innerhalb einer Funktion
print(variable1,
 variable2,
  summe)
```

*In dem obenstehenden Beispiel werden Variablen angelegt. Mit Variablen beschäftigten wir uns im nächsten Kapitel. Trotzdem möchte ich Sie bitten, sich variable1 und variable2 nocheinmal kurz anzusehen. Wir kommen später darauf zurück.*

4. Die Anzahl der Leerzeichen zwischen Operanden und Operatoren kann beliebig sein.

``` {python}
print(1+0, 1 + 1, 1 +                  2)
```

5. Die Einrückung mit Leerzeichen kennzeichnet einen zusammengehörigen Code-Block. Innerhalb eines Code-Blocks muss immer die gleiche Anzahl Leerzeichen verwendet werden. Es muss mindestens ein Leerzeichen gesetzt werden, ansonsten ist die Anzahl der Leerzeichen beliebig. Üblich sind 2 oder 4 Leerzeichen.  
Die folgende for-Schleife führt alle Anweisungen im eingerückten Ausführungsblock aus. Die anschließende, nicht eingerückte Zeile markiert den Beginn einer neuen, nicht zur Schleife gehörigen Anweisung.

```{python}
for i in range(2):
    print(variable1)
    print(variable2)
print(summe)
```

## Ausgabe formatieren
Mit sogenannten `f-Strings` können formatierte Zeichenfolgen erstellt werden. Formatierte Zeichenfolgen werden mit einem den Anführungsstrichen vorangestellten `f` erstellt. Werte und Variablen können durch Platzhalter eingesetzt werden, die mit geschweiften Klammern `{}` angegeben und mit Formattierungsinformationen versehen werden. Das Formatierungsformat innerhalb der geschweiften Klammer ist vereinfacht dargestellt:

```
{Variablenname:PlatzbedarfAusgabetyp}
```

Ein f-String mit Platzhaltern ohne Formatierungsinformationen:
```{python}
zahl1 = 5
zahl2 = 7
verhältnis = zahl1 / zahl2
print(f"Das Verhältnis von {zahl1} zu {zahl2} ist {verhältnis}.")
```

Die Anzahl der darzustellenden Nachkommastellen kann wie folgt festgelegt werden: `{verhältnis:.2f}`.

  - `:` leitet die Formatierungsbefehle ein.

  - `.` gibt an, dass Formatierungsinformationen für die Darstellung hinter dem Dezimaltrennzeichen folgen.

  - `2` ist der Wert für die darzustellenden Nachkommastellen.

  - `f` spezifiziert die Darstellung einer Gleitkommazahl 'float'.

```{python}
print(f"Das Verhältnis von {zahl1} zu {zahl2} ist {verhältnis:.2f}.")
```

Das Gleiche ist mit einem Wert möglich:
```{python}
print(f"Das Verhältnis ist genauer {0.7142857142857143:.3f}.")
```

Ein Wert für die insgesamt darzustellenden Stellen wird vor dem Dezimaltrennzeichen übergeben `{verhältnis:7.2f}` bzw. inklusive führender Nullen `{verhältnis:07.2f}`: 
```{python}
print(f"Das Verhältnis von {zahl1} zu {zahl2} ist {verhältnis:7.2f}.")
print(f"Das Verhältnis ist genauer {0.7142857142857143:07.3f}.")
```

Das Dezimaltrennzeichen zählt als eine Stelle.

Häufig verwendete Formatierungen sind:

::: {.panel-tabset}
## Ganze Zahlen
Ganze Zahlen haben den Ausgabetyp `d`.

| Formatierung | Ausgabe |
|---|--------|
| `nd` | n-Stellen werden für die Ausgabe verwendet |
| `0nd` | Ausgabe von n-Stellen, wobei die Leerstellen mit Nullen aufgefüllt werden. |
| `+d` | Ausgabe des Vorzeichens auch bei positiven Zahlen |

## Gleitkommazahlen
Gleitkommazahlen haben die Ausgabetypen `f` und `e`.

| Formatierung | Ausgabe |
|---|--------|
| `.mf` | m-Stellen werden für die Nachkommastellen genutzt. |
| `n.mf` | Insgesamt werden n-Stellen verwendet, wobei m-Stellen für die Nachkommastellen genutzt werden. |
| `n.me` | Genauso, aber die Ausgabe erfolgt in exponentieller Schreibweise. |

## Zeichenfolgen
Zeichenfolgen haben den Ausgabetyp `s`.

| Formatierung | Ausgabe |
|---|--------|
| `ns` | Insgesamt werden n-Stellen verwendet. |
| `<ns`, `>ns`, `^ns` | Genauso, jedoch wird die Zeichenfolge linksbündig, rechtsbündig bzw. zentriert platziert. |

:::

Eine Auflistung aller verfügbaren Ausgabetypen findet sich in der [Python Dokumentation](https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting).

## Aufgaben
1. Gleitkommazahlen können natürlich, z. B. {1015.39:12.4f}, oder wissenschaftlich, {1015.39:e}, dargestellt werden.
 
   - Verändern Sie die natürliche Schreibweise so, dass nur noch eine Stelle nach dem Komma angezeigt wird. Was fällt auf?
 
   - Verändern Sie die wissenschaftliche Schreibweise so, dass anstelle von `e` die Zehnerbasis als `E` geschrieben wird.

2. Wandeln Sie die Zahl 1015.39 in eine Zeichenfolge um und stellen Sie diese mit 12 Stellen rechtsbündig dar.

3. Geben Sie mit Hilfe der formatierten Zeichenfolge eine Tabelle aus, welche die Spalten $x$, $x^2$ und $x^3$ für ganze Zahlen zwischen -2 und 2 auflistet.


::: {#tip-lösungausgabe .callout-tip collapse="true"}
## Musterlösung Ausgabe

:::: {.border}

1. Aufgabe
```{python}
# Verändern Sie die natürliche Schreibweise so, dass nur noch eine Stelle nach dem Komma angezeigt wird.
# Was fällt auf?
print(f"natürliche Schreibweise: {1015.39:12.4f}")
print(f"wissenschaftliche Schreibweise: {1015.39:e}")

print(f"Schreibweise mit einer Kommastelle: {1015.39:12.1f}")

# Verändern Sie die wissenschaftliche Schreibweise so, dass anstelle von e die Zehnerbasis als E geschrieben wird.
print(f"Zehnerbasis verändern: {1015.39:E}")

```

Es fällt auf, dass die Nachkommastelle der natürlichen Zahl automatisch gerundet wird. Beim Ändern der Zehnerbasis zu einem großen **E** wird dieses auch in der `print`-Ausgabe groß geschrieben.

2. Aufgabe

```{python}
# 2.
# Wandeln Sie die Zahl 1015.39 in eine Zeichenfolge um und stellen Sie diese mit 12 Stellen rechtsbündig dar.
print(f"{"1015.39":>12s}")
```

3. Aufgabe

```{python}
# 3.
# Geben Sie mit Hilfe der formatierten Zeichenfolge eine Tabelle aus, welche
# die Spalten x, x² und x³ und für ganze Zahlen zwischen -2 und 2 auflistet.

x = -2
print(f"{x:>10d} {x**2:>10d} {x**3:>10d}")
x = -1
print(f"{x:>10d} {x**2:>10d} {x**3:>10d}")
x = 0
print(f"{x:>10d} {x**2:>10d} {x**3:>10d}")
x = 1
print(f"{x:>10d} {x**2:>10d} {x**3:>10d}")
x = 2
print(f"{x:>10d} {x**2:>10d} {x**3:>10d}")
```

Alternativ ist auch eine (elegantere) Lösung mit einer `for`-Schleife möglich:

```{python}
for x in range(-2,3):
    print(f"{x:>12d} {x**2:>12d} {x**3:>12d}")
```

Musterlösung von Marc Sönnecken.
::::


:::

&nbsp;  

[@Arnold-2023-datentypen-und-grundlagen; @Arnold-2023-funktionen-module-dateien; @Arnold-2023-datenanalyse-python]
